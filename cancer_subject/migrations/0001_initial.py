# Generated by Django 2.0.2 on 2018-02-15 07:41

import _socket
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import django_crypto_fields.fields.encrypted_char_field
import django_crypto_fields.fields.encrypted_text_field
import django_crypto_fields.fields.firstname_field
import django_crypto_fields.fields.identity_field
import django_crypto_fields.fields.lastname_field
import django_revision.revision_field
import edc_base.model_fields.custom_fields
import edc_base.model_fields.date_estimated
import edc_base.model_fields.hostname_modification_field
import edc_base.model_fields.userfield
import edc_base.model_fields.uuid_auto_field
import edc_base.model_validators.date
import edc_base.model_validators.eligibility
import edc_base.model_validators.phone
import edc_base.sites.managers
import edc_base.utils
import edc_consent.validators
import edc_protocol.validators
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('sites', '0002_alter_domain_unique'),
    ]

    operations = [
        migrations.CreateModel(
            name='ActivityAndFunctioning',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model_validators.date.datetime_not_future, edc_protocol.validators.datetime_not_before_study_start], verbose_name='Report Date')),
                ('health_rate', models.CharField(choices=[('excellent', 'Excellent'), ('very_good', 'Very Good'), ('good', 'Good'), ('fair', 'Fair'), ('poor', 'Poor'), ('very_poor', 'Very Poor')], max_length=15, verbose_name='1. Overall, how would you rate your health during the PAST 4 WEEKS?')),
                ('health_problems', models.CharField(choices=[('not_at_all', 'Not at all'), ('very_little', 'Very Little'), ('somewhat', 'Somewhat'), ('quite_a_lot', 'Quite a lot'), ('no_physical_activities', 'Could not do physical activities')], max_length=35, verbose_name='2. During the PAST 4 WEEKS, how much did physical health problems limit your usual physical activities (walking, climbing stairs)?')),
                ('difficulty_work', models.CharField(choices=[('none_at_all', 'None at all'), ('a_little_bit', 'A little bit'), ('some', 'Some'), ('quite_a_lot', 'Quite a lot'), ('no_daily_work', 'Could not do daily work')], max_length=35, verbose_name='3. During the PAST 4 WEEKS, how much difficulty did you have doing your daily work, both at home and away from home, because of your physical health?')),
                ('bodily_pain', models.CharField(choices=[('none', 'None'), ('very_mild', 'Very mild'), ('moderate', 'Moderate'), ('severe', 'Severe'), ('very_severe', 'Very serere')], max_length=15, verbose_name='4. How much bodily pain have you had during the PAST 4 WEEKS?')),
                ('probs_from_work', models.CharField(choices=[('not_at_all', 'Not at all'), ('very_little', 'Very little'), ('somewhat', 'Somewhat'), ('quite_a_lot', 'Quite a lot'), ('no_daily_ activities', 'Could not do daily activities')], max_length=35, verbose_name='8. During the past 4 weeks, how much did personal or emotional problems keep you from doing work, school or other daily activities?')),
                ('energy', models.CharField(choices=[('very_much', 'Very much'), ('quite_a_lot', 'Quite a lot'), ('some', 'Some'), ('a_little', 'A little'), ('none', 'None')], max_length=15, verbose_name='5. During the PAST 4 WEEKS, how much energy did you have?')),
                ('health_probs_limit', models.CharField(choices=[('not_at_all', 'Not at all'), ('very_little', 'Very little'), ('somewhat', 'Somewhat'), ('quite_a_lot', 'Quite a lot'), ('no_social_activities', 'Could not do social activities')], max_length=35, verbose_name='6. During the PAST 4 WEEKS, how much did your physical health or emotional problems limit your usual social activities with family or friends?')),
                ('emotional_probs', models.CharField(choices=[('not_at_all', 'Not at all'), ('slightly', 'Slightly'), ('moderately', 'Moderately'), ('quite_a_lot', 'Quite a lot'), ('extremely', 'Extremely')], max_length=15, verbose_name='7. During the PAST 4 WEEKS, how much have you been bothered by emotional problems (such as feeling anxious, depressed or irritable)?')),
                ('perform_status', models.CharField(choices=[('0', 'Asymptomatic (Fully active, able to carry on all pre-disease activities without restriction)'), ('1', 'Symptomatic but completely ambulatory (Restricted in physically strenuous activity but ambulatory and able to carry out work of a light or sedentary nature. For example, light housework, office work)'), ('2', 'Symptomatic, &lt;50% in bed during the day (Ambulatory and capable of all self care but unable to carry out any work activities. Up and about more than 50% of waking hours)'), ('3', '50% in bed, but not bedbound (Capable of only limited self-care, confined to bed or chair 50% or more of waking hours)'), ('4', 'Bedbound (Completely disabled. Cannot carry on any self-care. Totally confined to bed or chair)')], max_length=205, verbose_name='9. What is the participant perfomance status, determined by study staff with questioning and observation of the participant')),
            ],
            options={
                'verbose_name': 'Activity and Functioning',
                'verbose_name_plural': 'Activity and Functioning',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Ae010',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model_validators.date.datetime_not_future, edc_protocol.validators.datetime_not_before_study_start], verbose_name='Report Date')),
                ('report_type', models.CharField(choices=[('original_report', 'Original report of an event'), ('updated_information', 'Updated information'), ('resolution', 'Resolution')], max_length=35, verbose_name='Which type of report is this?')),
                ('onset_date', models.DateTimeField(max_length=25, verbose_name='Date of onset of event being reported here:')),
                ('event_grade', models.CharField(max_length=15, verbose_name='Grade of primary event (use grading scale 1-5, where 5=death)')),
                ('relationship_description', models.CharField(choices=[('definitely_related', 'Definitely related to study activities'), ('probably_related', 'Probably related to study activities'), ('possibly_related', 'Possibly related to study activities'), ('probably_NOT_related', 'Probably NOT related to study activities'), ('not_related', 'Not related to study activities'), ('pending,cannot_tell_yet_if_related', 'Pending, cannot tell yet if related to study activities')], max_length=65, verbose_name='Please describe the relationship between this adverse event and study activities:')),
            ],
            options={
                'verbose_name': 'AE010 Adverse Event Report',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Af004',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model_validators.date.datetime_not_future, edc_protocol.validators.datetime_not_before_study_start], verbose_name='Report Date')),
                ('date_off_study', models.DateTimeField(help_text='dd/mm/yyyy', max_length=25, verbose_name='Date Participant off-study:')),
                ('date_last_contact', models.DateTimeField(help_text='dd/mm/yyyy', max_length=25, verbose_name='Date of last contact:')),
                ('off_study_reason', models.CharField(max_length=35, verbose_name='Describe the primary reason for going off-study:')),
                ('off_study_code', models.CharField(choices=[('completion_of_protocol_required_period_of_time_for_observation', 'Completion of protocol required period of time for observation (see MOP for definition of Completion.)'), ('death', 'Death (complete the AF005 Death Record form)'), ('participant_refused_further_contact', 'Participant refused further contact (explain in Comments below)'), ('unable_to_contact_participant_despite_repeated_attempts', 'Unable to contact Participant despite repeated attempts (see MOP for definition of Lost to Follow-Up.)'), ('OTHER', 'Other, specify:')], max_length=105, verbose_name='Based on description above, code the primary reason for the Participant to be going off Study:')),
                ('comments', models.CharField(max_length=35, verbose_name='Comments:')),
            ],
            options={
                'verbose_name': 'AF004 Off Study Record',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('visit_schedule_name', models.CharField(editable=False, help_text='the name of the visit schedule used to find the "schedule"', max_length=25)),
                ('schedule_name', models.CharField(editable=False, max_length=25)),
                ('visit_code', models.CharField(editable=False, max_length=25, null=True)),
                ('visit_code_sequence', models.IntegerField(blank=True, default=0, help_text='An integer to represent the sequence of additional appointments relative to the base appointment, 0, needed to complete data collection for the timepoint. (NNNN.0)', null=True, verbose_name='Sequence')),
                ('timepoint_status', models.CharField(choices=[('open', 'Open'), ('feedback', 'Feedback'), ('closed', 'Closed')], default='open', max_length=15)),
                ('timepoint_opened_datetime', models.DateTimeField(editable=False, help_text="the original calculated model's datetime, updated in the signal", null=True)),
                ('timepoint_closed_datetime', models.DateTimeField(editable=False, null=True)),
                ('timepoint', models.DecimalField(decimal_places=1, help_text='timepoint from schedule', max_digits=6, null=True)),
                ('timepoint_datetime', models.DateTimeField(help_text='Unadjusted datetime calculated from visit schedule', null=True)),
                ('appt_close_datetime', models.DateTimeField(help_text='timepoint_datetime adjusted according to the nearest available datetime for this facility', null=True)),
                ('facility_name', models.CharField(help_text='set by model that creates appointments, e.g. Enrollment', max_length=25)),
                ('appt_datetime', models.DateTimeField(db_index=True, verbose_name='Appointment date and time')),
                ('appt_type', models.CharField(choices=[('clinic', 'In clinic'), ('home', 'At home'), ('hospital', 'In hospital'), ('telephone', 'By telephone')], default='clinic', help_text='Default for subject may be edited Subject Configuration.', max_length=20, verbose_name='Appointment type')),
                ('appt_status', models.CharField(choices=[('new', 'New'), ('in_progress', 'In Progress'), ('incomplete', 'Incomplete'), ('done', 'Done'), ('cancelled', 'Cancelled')], db_index=True, default='new', help_text="If the visit has already begun, only 'in progress' or 'incomplete' are valid options", max_length=25, verbose_name='Status')),
                ('appt_reason', models.CharField(choices=[('scheduled', 'Routine / Scheduled'), ('unscheduled', 'Unscheduled')], max_length=25, verbose_name='Reason for appointment')),
                ('comment', models.CharField(blank=True, max_length=250, verbose_name='Comment')),
                ('is_confirmed', models.BooleanField(default=False, editable=False)),
            ],
            options={
                'ordering': ('timepoint', 'visit_code_sequence'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BaselineHIVHistory',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model_validators.date.datetime_not_future, edc_protocol.validators.datetime_not_before_study_start], verbose_name='Report Date')),
                ('has_hiv_result', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Dont_know', 'Do not know')], max_length=25, verbose_name='Has the participant been previously tested for HIV?')),
                ('had_who_illnesses', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='Refer to WHO classification document. DO NOT include the current cancer diagnosis.', max_length=3, verbose_name='Has patient ever had any WHO stage 3 or 4 illnesses?')),
                ('has_cd4', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name="Are 'CD4' results available? ")),
                ('cd4_result', models.DecimalField(blank=True, decimal_places=2, help_text='4-digit number field', max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(3000)], verbose_name='What is the value of the most recent CD4 result (closest to time of cancer diagnosis)')),
                ('cd4_drawn_date', models.DateField(blank=True, max_length=25, null=True, verbose_name='Date of recent CD4?')),
                ('has_prior_cd4', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Is a CD4 result lower than the most recent CD4 result available?')),
                ('nadir_cd4', models.DecimalField(blank=True, decimal_places=2, help_text='4-digit number field', max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(3000)], verbose_name='What is the value of the lowest CD4 result recorded')),
                ('nadir_cd4_drawn_date', models.DateField(blank=True, max_length=25, null=True, verbose_name='Date of lowest CD4')),
                ('has_vl', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name="Are 'VIRAL LOAD' results available? ")),
                ('vl_result', models.CharField(blank=True, max_length=25, null=True, validators=[django.core.validators.RegexValidator('^[<>=]{1}\\d+$', 'Result must include             the quantifier (<, > or =) followed by             the numeric value')], verbose_name='HIV viral load result')),
                ('vl_drawn_date', models.DateField(blank=True, max_length=25, null=True, verbose_name='Date of HIV viral load')),
            ],
            options={
                'verbose_name': 'Baseline HIV History',
                'verbose_name_plural': 'Baseline HIV History',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BaseRiskAssessment',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model_validators.date.datetime_not_future, edc_protocol.validators.datetime_not_before_study_start], verbose_name='Report Date')),
                ('hepatitis', models.CharField(choices=[('no', 'No'), ('hepatitis_B', 'Hepatitis B'), ('hepatitis_C', 'Hepatitis C'), ('dont_know', "Don't know")], max_length=15, verbose_name='Have you been told you have hepatitis B or C before?')),
                ('tuberculosis', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Dont_know', 'Do not know')], max_length=25, verbose_name='Do you have now or have you ever had  tuberculosis?')),
                ('year_tb', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='In what year did you last have tuberculosis (year of diagnosis)?')),
                ('has_worked_mine', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Declined', 'Patient declined to answer')], max_length=35, verbose_name='Have you ever worked at a mine?')),
                ('has_smoked', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Declined', 'Patient declined to answer')], max_length=35, verbose_name='Have you ever smoked cigarettes?')),
                ('age_firstsex', models.CharField(choices=[('younger_than_15_years_old', 'younger than 15 years old'), ('between_15_and_17_years_old', 'between 15 and 17 years old'), ('older_than_17_years_old', 'older than 17 years old'), ('dont_know', "don't know"), ('never', 'never'), ('DWTA', "Don't want to answer"), ('Declined', 'Patient declined to answer')], max_length=35, verbose_name='How old were you when you first had sex?')),
                ('has_alcohol', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Declined', 'Patient declined to answer')], max_length=35, verbose_name='Do you drink alcohol?')),
                ('tradmedicine', models.CharField(choices=[('NEVER', 'Never'), ('less_than_once_yearly', 'Less than once a year'), ('between_1_and_5_times_yearly', 'Between 1 and 5 times a year'), ('between_5_to_10_times_yearly', 'Between 5 to 10 times a year'), ('more_than_10_times_yearly', 'More than 10 times a year'), ('Declined', 'Patient declined to answer')], max_length=35, verbose_name='How often do you use traditional medicine?')),
                ('is_albino', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Is patient an albino?')),
            ],
            options={
                'verbose_name': 'Base Risk Assessment',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BaseRiskAssessmentAlcohol',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model_validators.date.datetime_not_future, edc_protocol.validators.datetime_not_before_study_start], verbose_name='Report Date')),
                ('alcohol_weekly', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(7)], verbose_name='How many days per week do you drink alcohol?')),
                ('amount_drinking', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)], verbose_name='On days you drink, how many drinks do you have (one drink is 300ml of beer/chibuku, 150ml of wine,or 50ml of whiskey/vodka/gin)?')),
            ],
            options={
                'verbose_name': 'Base Risk Assessment: Alcohol',
                'verbose_name_plural': 'Base Risk Assessment: Alcohol',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BaseRiskAssessmentCancer',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model_validators.date.datetime_not_future, edc_protocol.validators.datetime_not_before_study_start], verbose_name='Report Date')),
                ('family_cancer', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Dont_know', 'Do not know')], max_length=25, verbose_name='Has your son, daughter, brother, sister, or parent ever had cancer?')),
                ('family_cancer_type', models.CharField(blank=True, choices=[('dont_know', "Don't know"), ('cervical_cancer', 'Cervical cancer'), ('breast_cancer', 'Breast cancer'), ('esophageal_cancer', 'Esophageal cancer'), ("Kaposi's_sarcoma", "Kaposi's sarcoma"), ('lymphoma', 'Lymphoma'), ('liver_cancer', 'Liver cancer'), ('eye_cancer', 'Eye cancer'), ('other_or_multiple_cancers', 'Other or multiple cancers, describe:')], max_length=45, verbose_name='What kind of cancer did your brother, sister, or parent have?')),
                ('family_cancer_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('had_previous_cancer', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Dont_know', 'Do not know')], max_length=25, verbose_name='Have you had PREVIOUS cancer, before the current cancer?')),
                ('previous_cancer', models.CharField(blank=True, choices=[('dont_know', "Don't know"), ('cervical_cancer', 'Cervical cancer'), ('breast_cancer', 'Breast cancer'), ('esophageal_cancer', 'Esophageal cancer'), ("Kaposi's_sarcoma", "Kaposi's sarcoma"), ('lymphoma', 'Lymphoma'), ('leukemia', 'Leukemia'), ("Wilm's_Tumor", "Wilm's Tumor"), ('OTHER', 'Other or multiple cancers, describe:')], max_length=45, verbose_name='What kind of cancer did you have before?')),
                ('previous_cancer_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
            ],
            options={
                'verbose_name': 'Base Risk Assessment: Cancer',
                'verbose_name_plural': 'Base Risk Assessment: Cancer',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BaseRiskAssessmentChemical',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model_validators.date.datetime_not_future, edc_protocol.validators.datetime_not_before_study_start], verbose_name='Report Date')),
                ('asbestos', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Dont_know', 'Do not know')], max_length=25, verbose_name='Have you ever worked with asbestos without adequate protection?')),
                ('asbestos_no_protection', models.CharField(blank=True, choices=[('<5 years', 'less than 5 years'), ('5 to 20 years', 'between 5 and 20 years'), ('>20 years', 'more than 20 years')], max_length=25, verbose_name='What is the total amount of time you worked with asbestos without protection?')),
                ('chemicals', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Dont_know', 'Do not know')], help_text='Radon, Cadmium, Chromium, Beryllium, Aluminum, Silica, Sulfuric acid, mist, chloromethyl ether, coke (fuel from coal), mustard gas', max_length=25, verbose_name='Have you ever worked with any of these chemical without adequate protection?')),
                ('chemicals_time', models.CharField(blank=True, choices=[('<5 years', 'less than 5 years'), ('5 to 20 years', 'between 5 and 20 years'), ('>20 years', 'more than 20 years')], max_length=25, verbose_name='What is the total amount of time you worked with the chemical(s) without protection?')),
                ('arsenic_smelting', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Dont_know', 'Do not know')], max_length=25, verbose_name='Have you ever been involved with arsenic smelting (nickel and copper), coal gasification, or iron/steel founding without adequate protection? ')),
                ('total_time_no_protection', models.CharField(blank=True, choices=[('<5 years', 'less than 5 years'), ('5 to 20 years', 'between 5 and 20 years'), ('>20 years', 'more than 20 years')], max_length=25, verbose_name='What is the total amount of time you worked with the process(es) without protection?')),
            ],
            options={
                'verbose_name': 'Base Risk Assessment: Chemicals',
                'verbose_name_plural': 'Base Risk Assessment: Chemicals',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BaseRiskAssessmentDemo',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model_validators.date.datetime_not_future, edc_protocol.validators.datetime_not_before_study_start], verbose_name='Report Date')),
                ('marital_status', models.CharField(choices=[('single', 'Single'), ('married', 'Married'), ('cohabiting', 'Cohabiting'), ('widowed', 'Widowed'), ('divorced', 'Divorced'), ('OTHER', 'Other, specify:')], max_length=15, verbose_name='Marital status:')),
                ('marital_status_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('race', models.CharField(choices=[('black_african', 'Black African'), ('caucasian', 'Caucasian'), ('asian', 'Asian'), ('OTHER', 'Other, specify:')], max_length=15, verbose_name='Race:')),
                ('race_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('ethnic_grp', models.CharField(choices=[('Tswana_Bangwato', 'Tswana-Bangwato'), ('Tswana_Bakwena', 'Tswana-Bakwena'), ('Tswana_Bangwaketsi', 'Tswana-Bangwaketsi'), ('Tswana_Bakgatla', 'Tswana-Bakgatla'), ('Tswana_Batawana', 'Tswana-Batawana'), ('Tswana_Barolong', 'Tswana-Barolong'), ('Tswana_Bamalete', 'Tswana-Bamalete'), ('Tswana_Batlokwa', 'Tswana-Batlokwa'), ('Bakalanga', 'Bakalanga'), ('Basarwa', 'Basarwa'), ('Kgalagadi', 'Kgalagadi'), ('White', 'White'), ('Asian', 'Asian'), ('OTHER', 'Other, specify:')], max_length=25, verbose_name='Ethnic Group:')),
                ('ethnic_grp_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('community', models.CharField(choices=[('040', '040 Gaborone'), ('060', '060 Francistown')], max_length=35, verbose_name='Since 2014, what community have you lived in?')),
                ('community_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('district20', models.CharField(choices=[('Central', 'Central District'), ('Ghanzi', 'Ghanzi District'), ('Kgalagadi', 'Kgalagadi District'), ('Kgatleng', 'Kgatleng District'), ('Kweneng', 'Kweneng District'), ('North-East', 'North-East District '), ('North-West', 'North-West District (includes Chobe/Ngamiland)'), ('South-East', 'South-East District'), ('Southern', 'Southern District')], max_length=55, verbose_name='Over the past 20 years, which district have you ived in the most?')),
                ('setting20', models.CharField(choices=[('farm/lands', 'Farm/lands'), ('village', 'Village'), ('city/town', 'City/Town')], max_length=15, verbose_name='Over the past 20 years, what best describes the setting you have lived in for most of the time?')),
                ('district', models.CharField(choices=[('Central', 'Central District'), ('Ghanzi', 'Ghanzi District'), ('Kgalagadi', 'Kgalagadi District'), ('Kgatleng', 'Kgatleng District'), ('Kweneng', 'Kweneng District'), ('North-East', 'North-East District '), ('North-West', 'North-West District (includes Chobe/Ngamiland)'), ('South-East', 'South-East District'), ('Southern', 'Southern District')], max_length=65, verbose_name='Which district do you live in now?')),
                ('setting', models.CharField(choices=[('farm/lands', 'Farm/lands'), ('village', 'Village'), ('city/town', 'City/Town')], max_length=15, verbose_name='What best describes the setting you live in for most of the time now?')),
                ('education', models.CharField(choices=[('none', 'None'), ('primary', 'Primary'), ('junior_secondary', 'Junior secondary'), ('senior_secondary', 'Senior secondary'), ('tertiary', 'Tertiary')], max_length=25, verbose_name='Educational level completed:')),
                ('occupation', models.CharField(choices=[('housewife', 'Housewife'), ('salaried_(govt)', 'Salaried (government)'), ('salaried_(private)', 'Salaried (private)'), ('domestic_work_(paid)', 'Domestic work (paid)'), ('self_employed', 'Self-employed'), ('student', 'Student'), ('unemployed', 'Unemployed'), ('OTHER', 'Other, specify:')], max_length=25, verbose_name='Occupation:')),
                ('occupation_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('money_provide', models.CharField(choices=[('unsure', 'Unsure'), ('you', 'You'), ('partner', 'Partner or spouse'), ('parents', 'Parents'), ('relatives', 'Other relatives'), ('friend', 'Friend'), ('OTHER', 'Other, specify:')], max_length=25, verbose_name='Who provides most of your money:')),
                ('money_provide_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('money_earned', models.CharField(choices=[('none', 'None'), ('<P200/month (P50/week)', '<P200/month (&lt; P50/week)'), ('P200-500/month (P50-120/week)', 'P200-500/month (P50-120/week)'), ('P501-1000/month (P120-230/week)', 'P501-1000/month (P120-230/week)'), ('P1001-2500/month (P230-580/week)', 'P1001-2500/month (P230-580/week)'), ('P2501-5000/month (P580-1160/week)', 'P2501-5000/month (P580-1160/week)'), ('P5001-10000/month (P1160-2330/week)', 'P5001-10000/month (P1160-2330/week)'), ('P10001-20000/month (P2330-4600/week)', 'P10001-20000/month (P2330-4600/week)'), ('P20001-30000/month (P4600-7000/week)', 'P20001-30000/month (P4600-7000/week)'), ('>P30000/month (>P7000/week)', '>P30000/month (>P7000/week)')], max_length=45, verbose_name='How much money do you personally earn?')),
                ('electricity', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Do you have electricity in your house?')),
                ('toilet', models.CharField(choices=[('indoor_toilet', 'Indoor toilet'), ('private_latrine', 'Private latrine for your house/compound'), ('shared_latrine', 'Shared latrine with other compounds'), ('no_latrine', 'No latrine facilities'), ('OTHER', 'Other, specify:')], max_length=45, verbose_name='Which of the following types of toilet facilities do you most often use at home?')),
                ('toilet_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('household_people', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='How many people, including yourself, stay in your household/compound most of the time?')),
                ('food_security', models.CharField(choices=[('NEVER', 'Never'), ('rarely', 'Rarely'), ('sometimes', 'Sometimes'), ('often', 'Often'), ('always', 'always'), ('Declined', 'Patient declined to answer')], max_length=15, verbose_name='In the past 4 weeks, did you or any household member have to eat a smaller meal than you felt you needed, or even to skip a meal, because there was not enough food?')),
            ],
            options={
                'verbose_name': 'Base Risk Assessment: Demographics',
                'verbose_name_plural': 'Base Risk Assessment: Demographics',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BaseRiskAssessmentEating',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model_validators.date.datetime_not_future, edc_protocol.validators.datetime_not_before_study_start], verbose_name='Report Date')),
                ('five_fruit', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Dont_know', 'Do not know')], help_text='One serving is one apple, banana or orange, 1 cup of raw leafy vegetable (like spinach or lettuce), 1/2 cup of beans/peas, 1/2 cup of  chopped, cooked or canned fruit/vegetable, or 3/4 cup of fruit/vegetable juice. Any fruit, vegetable, or beans qualify.', max_length=25, verbose_name='Do you eat 5 or more fruit, vegetables, or beans per day?')),
                ('meals_weekly', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(30)], verbose_name='How many meals per week include corn/maize?')),
                ('meal_sorghum', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(30)], verbose_name='How many meals per week include sorghum?')),
                ('meal_millet', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(30)], verbose_name='How many meals per week include millet?')),
                ('meal_rice', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(30)], verbose_name='How many meals per week include rice?')),
                ('meal_peanuts', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(30)], verbose_name='How many meals per week include peanuts/groundnuts?')),
            ],
            options={
                'verbose_name': 'Base Risk Assessment: Eating',
                'verbose_name_plural': 'Base Risk Assessment: Eating',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BaseRiskAssessmentFemale',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model_validators.date.datetime_not_future, edc_protocol.validators.datetime_not_before_study_start], verbose_name='Report Date')),
                ('age_period', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(11), django.core.validators.MaxValueValidator(50)], verbose_name='At what age did you start having your menstrual period?')),
                ('children', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='How many children have you given birth to?')),
                ('years_breastfed', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Have you breastfed for a total of at least 1 year?  If you have more than 1 child, this includes time spent breast feeding all your children.')),
            ],
            options={
                'verbose_name': 'Base Risk Assessment: Female',
                'verbose_name_plural': 'Base Risk Assessment: Female',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BaseRiskAssessmentFuel',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model_validators.date.datetime_not_future, edc_protocol.validators.datetime_not_before_study_start], verbose_name='Report Date')),
                ('fuel_20y', models.CharField(choices=[('solid_fuels', 'solid fuels (dung, charcoal, wood, crops, coal)'), ('kerosene_or_gas', 'kerosene or gas'), ('electricity', 'electricity'), ('dont_know', "don't know"), ('OTHER', 'Other, specify:')], max_length=55, verbose_name='Over the past 20 years, what type of fuel was used most for cooking/heating in your household?')),
                ('fuel_20y_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=250, null=True, verbose_name='If yes, specify')),
                ('cooking', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Dont_know', 'Do not know')], max_length=25, verbose_name='Over the past 20 years, was cooking usually done indoors in your household?')),
                ('fuel_mm', models.CharField(choices=[('solid_fuels', 'solid fuels (dung, charcoal, wood, crops, coal)'), ('kerosene_or_gas', 'kerosene or gas'), ('electricity', 'electricity'), ('dont_know', "don't know"), ('OTHER', 'Other, specify:')], max_length=55, verbose_name='In the past month, what type of fuel was used most for cooking / heating in your household?')),
                ('fuel_mm_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=250, null=True, verbose_name='If yes, specify')),
                ('cooking_mm', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Dont_know', 'Do not know')], max_length=25, verbose_name='In the past month, was cooking usually done indoors in your household?')),
            ],
            options={
                'verbose_name': 'Base Risk Assessment: Fuel',
                'verbose_name_plural': 'Base Risk Assessment: Fuel',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BaseRiskAssessmentMining',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model_validators.date.datetime_not_future, edc_protocol.validators.datetime_not_before_study_start], verbose_name='Report Date')),
                ('mine_time', models.CharField(choices=[('<5 years', 'less than 5 years'), ('5 to 20 years', 'between 5 and 20 years'), ('>20 years', 'more than 20 years')], max_length=25, verbose_name='What is the total amount of time you worked in the mine?')),
                ('mine_type', models.CharField(choices=[('gold', 'gold'), ('diamond', 'diamond'), ('copper', 'copper'), ('nickel', 'nickel'), ('OTHER', 'Other, specify:')], max_length=25, verbose_name='What kind of mine have you worked in?')),
                ('mine_prompt_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('mine_underground', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Dont_know', 'Do not know')], max_length=25, verbose_name='Have you ever worked UNDERGROUND in a mine?')),
                ('mine_underground_time', models.CharField(blank=True, choices=[('<5 years', 'less than 5 years'), ('5 to 20 years', 'between 5 and 20 years'), ('>20 years', 'more than 20 years')], max_length=25, verbose_name='What is the total amount of time you worked UNDERGROUND in the mine?')),
                ('last_mine', models.DateField(max_length=25, verbose_name='When did you last work in a mine?')),
            ],
            options={
                'verbose_name': 'Base Risk Assessment: Mining',
                'verbose_name_plural': 'Base Risk Assessment: Mining',
            },
        ),
        migrations.CreateModel(
            name='BaseRiskAssessmentSmoking',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model_validators.date.datetime_not_future, edc_protocol.validators.datetime_not_before_study_start], verbose_name='Report Date')),
                ('smoke_now', models.CharField(choices=[('Yes', 'Yes'), ('No', 'no, I used to smoke but quit')], max_length=35, verbose_name='Do you smoke cigarettes now?')),
                ('cigarette_smoking', models.CharField(blank=True, choices=[('14_or_fewer_cigarettes_daily', '14 or fewer cigarettes a day'), ('between_15_and_25 cigarettes_daily', 'between 15 and 25 cigarettes a day'), ('more_than_25_cigarettes_daily', 'more than 25 cigarettes a day'), ('refused', 'Participant declined to answer')], max_length=35, null=True, verbose_name='How many cigarettes do you smoke per day?')),
                ('years_smoked', models.IntegerField(blank=True, help_text='If subject has quit smoking, leave blank.', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(90)], verbose_name='For how many years have you smoked?')),
                ('cigarette_smoked', models.CharField(blank=True, choices=[('14_or_fewer_cigarettes_daily', '14 or fewer cigarettes a day'), ('between_15_and_25 cigarettes_daily', 'between 15 and 25 cigarettes a day'), ('more_than_25_cigarettes_daily', 'more than 25 cigarettes a day'), ('refused', 'Participant declined to answer')], max_length=35, null=True, verbose_name='How many cigarettes did you smoke per day?')),
                ('when_quit', models.CharField(blank=True, choices=[('less_than_2_years_ago', 'less than 2 years ago'), ('between_2_and_10_years_ago', 'between 2 and 10 years ago'), ('between_10_and_20_years_ago', 'between 10 and 20 years ago'), ('more_than_20_years_ago', 'more than 20 years ago'), ('refused', 'Participant declined to answer')], max_length=35, null=True, verbose_name='When did you quit smoking cigarettes?')),
                ('years_smoked_before', models.IntegerField(blank=True, null=True, verbose_name='For how many years did you smoke before quitting?')),
            ],
            options={
                'verbose_name': 'Base Risk Assessment: Smoking',
                'verbose_name_plural': 'Base Risk Assessment: Smoking',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BaseRiskAssessmentSun',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model_validators.date.datetime_not_future, edc_protocol.validators.datetime_not_before_study_start], verbose_name='Report Date')),
                ('hours_outdoor', models.CharField(choices=[('1_hour_or_less', '1 hour or less'), ('2_hours', '2 hours'), ('3_hours', '3 hours'), ('4_hours', '4 hours'), ('5_hours', '5 hours'), ('6_hours', '6 hours')], max_length=25, verbose_name='On average, how many hours are you outdoors per day between 10am and 4pm?')),
                ('sleeved_shirt', models.CharField(choices=[('NEVER', 'Never'), ('rarely', 'Rarely'), ('sometimes', 'Sometimes'), ('often', 'Often'), ('always', 'always'), ('Declined', 'Patient declined to answer')], max_length=25, verbose_name='When you are outside on a sunny day, how often do you wear a SHIRT WITH SLEEVES?')),
                ('hat', models.CharField(choices=[('NEVER', 'Never'), ('rarely', 'Rarely'), ('sometimes', 'Sometimes'), ('often', 'Often'), ('always', 'always'), ('Declined', 'Patient declined to answer')], max_length=25, verbose_name='When you are outside on a sunny day, how often do you wear a HAT?')),
                ('shade_umbrella', models.CharField(choices=[('NEVER', 'Never'), ('rarely', 'Rarely'), ('sometimes', 'Sometimes'), ('often', 'Often'), ('always', 'always'), ('Declined', 'Patient declined to answer')], max_length=25, verbose_name='When you are outside on a sunny day, how often do you stay in the SHADE or UNDER AN UMBRELLA?')),
                ('sunglasses', models.CharField(choices=[('NEVER', 'Never'), ('rarely', 'Rarely'), ('sometimes', 'Sometimes'), ('often', 'Often'), ('always', 'always'), ('Declined', 'Patient declined to answer')], max_length=25, verbose_name='When you are outside on a sunny day, how often do you wear SUNGLASSES?')),
            ],
            options={
                'verbose_name': 'Base Risk Assessment: Sun',
                'verbose_name_plural': 'Base Risk Assessment: Sun',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BHHCd4',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model_validators.date.datetime_not_future, edc_protocol.validators.datetime_not_before_study_start], verbose_name='Report Date')),
                ('nadir_cd4', models.DecimalField(decimal_places=2, help_text='If current (most recent) CD4 is lowest recorded, record again here.', max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(3000)], verbose_name="What is the value of the lowest 'CD4' test recorded?")),
                ('nadir_cd4_drawn_date', models.DateField(max_length=25, null=True, verbose_name="Date 'CD4' test was run:")),
            ],
            options={
                'verbose_name': 'BHH: CD4',
                'verbose_name_plural': 'BHH: CD4',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BHHHivTest',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model_validators.date.datetime_not_future, edc_protocol.validators.datetime_not_before_study_start], verbose_name='Report Date')),
                ('hiv_drawn_date', models.DateField(max_length=25, verbose_name='Date of most recent HIV test:')),
                ('hiv_testdate_est', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Is the HIV test date estimated?')),
                ('hiv_result', models.CharField(choices=[('reactive', ' Reactive (positive)'), ('non_reactive', ' Non-Reactive (negative)'), ('dont_know', " Don't Know (didn't receive result, forgot, etc)")], help_text="If last HIV test negative (or Don't Know) and more than six months ago, perform HIV testing unless patient refuses.", max_length=50, verbose_name='Result of most recent HIV test:')),
            ],
            options={
                'verbose_name': 'BHH: HIV Test',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BHHWhoIllness',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model_validators.date.datetime_not_future, edc_protocol.validators.datetime_not_before_study_start], verbose_name='Report Date')),
                ('who_illness_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('who_illness_date', models.DateField(blank=True, help_text='DO NOT include the current cancer diagnosis.', max_length=25, null=True, verbose_name='Date of most recent WHO stage 3 or 4 illness:')),
            ],
            options={
                'verbose_name': 'BHH: WHO illness',
                'verbose_name_plural': 'BHH: WHO illness',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CancerDiagnosis',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model_validators.date.datetime_not_future, edc_protocol.validators.datetime_not_before_study_start], verbose_name='Report Date')),
                ('onco_number', models.CharField(blank=True, max_length=10, null=True, verbose_name='GPH ONCO number')),
                ('pathology_number', models.CharField(blank=True, max_length=50, null=True, verbose_name='Pathology number(s)')),
                ('pm_number', models.CharField(blank=True, max_length=10, null=True, verbose_name='PM number')),
                ('diagnosis', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Has a cancer diagnosis been made?')),
                ('cancer_category', models.CharField(blank=True, choices=[('new', 'New Cancer (no treatment for this cancer type for >5 year, or treatment began less than 6 weeks ago'), ('relapsed', 'Relapsed or recurrent cancer (no active treatment for this cancer for >1 year)'), ('ongoing', 'Ongoing treatment (active treatment for this cancer type in past year)')], help_text='If patient develops a new cancer type (for example, breast cancer after or during treatment for lymphoma) this should be considered a new cancer case.', max_length=105, null=True, verbose_name='Category of cancer case:')),
                ('symptom_prompt', models.CharField(blank=True, choices=[('pain', 'Pain'), ('lump/mass', 'Lump/Mass'), ('fever', 'Fever'), ('cough', 'Cough'), ('shortness_of_breath', 'Shortness of Breath'), ('bleeding', 'Bleeding'), ('weight_loss', 'Weight loss'), ('swelling_of_leg', 'Swelling of leg'), ('difficulty_swallowing', 'Difficulty swallowing'), ('bump/rash_on_skin_or_eye', 'Bump/rash on skin or eye'), ('OTHER', 'Other, specify:')], max_length=25, null=True, verbose_name='What symptom was most important in prompting patient to seek care leading to diagnosis of cancer?')),
                ('symptom_prompt_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('symptom_first_noticed', models.DateField(blank=True, max_length=25, null=True, verbose_name='When did the patient first notice the symptom (pain, lump, etc.) that led to diagnosis of cancer?')),
                ('first_evaluation', models.DateField(blank=True, max_length=25, null=True, verbose_name='When did the patient first receive an evaluation by a doctor or nurse for the symptom that led to diagnosis of cancer?')),
                ('trad_evaluation', models.DateField(blank=True, max_length=25, null=True, verbose_name="When did the patient first receive an evaluation by a 'Traditional Doctor or Sangoma' for the symptom that led to diagnosis of cancer?")),
                ('date_diagnosed', models.DateField(blank=True, max_length=25, null=True, verbose_name='Date of cancer diagnosis')),
                ('diagnosis_basis', models.CharField(blank=True, choices=[('clinica_only', 'Clinical Only'), ('clinical_and_radiology', 'Clinical AND Radiology (CT, X-ray, U/S)'), ('surgery', 'Surgery'), ('biochemical/immunological_test', 'Biochemical/Immunological Test'), ('cytology/haematology', 'Cytology/Haematology'), ('histology_of_metastasis', 'Histology of Metastasis'), ('histology_of_primary', 'Histology of Primary'), ('autopsy_with_histology', 'Autopsy with Histology'), ('OTHER', 'Other (including unknown): ')], max_length=45, null=True, verbose_name='Basis of diagnosis')),
                ('diagnosis_basis_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('diagnosis_word', models.CharField(blank=True, help_text='In words, metatstatic breast cancer, kaposis of right leg', max_length=100, null=True, verbose_name='Diagnosis')),
                ('cancer_site', models.CharField(blank=True, max_length=25, null=True, validators=[django.core.validators.RegexValidator(message='A site code always starts with a C, followed by numbers: integer or decimal.FORMAT is CXX or CXX.X', regex='^([C](\\d{2})|[C](\\d{2}\\.\\d{1}))$')], verbose_name='Cancer Site (record ICD topography code)')),
                ('clinical_diagnosis', models.CharField(blank=True, max_length=25, null=True, validators=[django.core.validators.RegexValidator(message='Please enter the correct morphology code. its M, followed by 4 numbers, a slash, and one more number, a 3.', regex='^[M]{1}[0-9]{4}[/][3]{1}$')], verbose_name='Clinical and/or Pathologic Diagnosis (record ICD morphology code, M9140/3)')),
                ('tumour', models.CharField(blank=True, choices=[('UNK', 'Unknown'), ('X', 'X'), ('0', '0'), ('1', '1'), ('2', '2'), ('3', '3')], help_text="For Kaposi's record T here, 0 or 1", max_length=15, null=True, verbose_name='TNM system- Tumour (T)')),
                ('tumour_basis', models.CharField(blank=True, choices=[('UNK', 'Unknown'), ('clinical', 'Clinical'), ('pathology', 'Pathology')], max_length=15, null=True, verbose_name='Basis of Tumour (T) assessment')),
                ('lymph_nodes', models.CharField(blank=True, choices=[('UNK', 'Unknown'), ('X', 'X'), ('0', '0'), ('1', '1'), ('2', '2'), ('3', '3')], help_text="For Kaposi's record I here, 0 or 1", max_length=15, null=True, verbose_name='TNM system- Lymph Nodes (N)')),
                ('lymph_basis', models.CharField(blank=True, choices=[('UNK', 'Unknown'), ('clinical', 'Clinical'), ('pathology', 'Pathology')], max_length=15, null=True, verbose_name='Basis of Lymph Node (N) assessment')),
                ('metastasis', models.CharField(blank=True, choices=[('UNK', 'Unknown'), ('X', 'X'), ('0', '0'), ('1', '1')], help_text="For Kaposi's record S here, 0 or 1", max_length=15, null=True, verbose_name='TNM system- Metastasis (M)')),
                ('metastasis_basis', models.CharField(blank=True, choices=[('UNK', 'Unknown'), ('clinical', 'Clinical'), ('pathology', 'Pathology')], max_length=15, null=True, verbose_name='Basis of Metastasis (M) assessment')),
                ('cancer_stage', models.CharField(blank=True, choices=[('X', 'X'), ('0', '0'), ('1', '1'), ('2', '2'), ('3', '3'), ('4', '4')], help_text="For lymphomas, report Ann Arbor Stage here. For Kaposi's, report ACTG Stage here.", max_length=15, null=True, verbose_name='Overall cancer stage')),
                ('cancer_stage_modifier', models.CharField(blank=True, choices=[('UNK', 'Unknown'), ('No stage modifier', 'No stage modifier'), ('A', 'A'), ('B', 'B'), ('C', 'C'), ('D', 'D')], help_text="For lymphomas, report Ann Arbor Stage here.For Kaposi's, report 'None'.", max_length=15, null=True, verbose_name='Overall cancer stage modifier')),
                ('any_other_results', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If answered YES, make sure to answer the Specialized Diagnostics form', max_length=3, verbose_name='Are there other results of specialized testing (receptor, cell surface markers) that should be reported?')),
                ('paper_documents', models.CharField(max_length=7, verbose_name='Folder number of stored paper documents')),
                ('results_to_record_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
            ],
            options={
                'verbose_name': 'Cancer Diagnosis',
                'verbose_name_plural': 'Cancer Diagnosis',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ChemoMedPlan',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('drug_code', models.CharField(choices=[('AMOX', 'AMOX = amoxicillin'), ('ALLO', 'ALLO = allopurinol'), ('BLEO', 'BLEO = bleomycin'), ('CARB', 'CARB = carboplatin'), ('CARM', 'CARM = carmustine'), ('CAPC', 'CAPC = capecitabine'), ('CDX', 'CDX = casodex'), ('CIPR', 'CIPR = ciprofloxacin'), ('CISP', 'CISP = cisplatin'), ('CYCL', 'CYCL = cyclophosphamide'), ('CYTB', 'CYTB = cytarabine'), ('CTXM', 'CTXM = cotrimoxazole'), ('DAUN', 'DAUN = daunorubicin,'), ('DCAR', 'DCAR = dacarbazine'), ('DEXA', 'DEXA = dexamethasone'), ('DOX', 'DOXO = doxorubicin'), ('DTAX', 'DTAX = docetaxel'), ('ETOP', 'ETOP = etoposide'), ('FLOR', 'FLOR = fluorouracil'), ('GEMC', 'GEMC = gemcitabine'), ('GLEE', 'GLEE = gleevec'), ('HERC', 'HERC = herception'), ('HYDX', 'HYDX = hydroxyurea'), ('IFOS', 'IFOS = ifosfamide'), ('IRIN', 'IRIN = irinotecan'), ('LEUK', 'LEUK = leukovorin'), ('LEUP', 'LEUP = leuprolide'), ('LDOX', 'LDOX = liposomal doxorubicin'), ('MECH', 'MECH = mechlorethamine'), ('METO', 'METO = metocloperamide (maxolone)'), ('METX', 'METX = methatrexate'), ('MITO', 'MITO = mitoxantrone'), ('OXAL', 'OXAL = oxaliplatin'), ('PROC', 'PROC = procarbazine'), ('PROM', 'PROM = promethazine'), ('PRED', 'PRED = prednisone'), ('PTAX', 'PTAX = paclitaxel'), ('RANT', 'RANT = ranitidine'), ('RITX', 'RITX = Rituximab'), ('TAMX', 'TAMX = tamoxifen'), ('VINC', 'VINC = vincristine'), ('VINB', 'VINB = vinblastine'), ('VINO', 'VINO = vinorelbine'), ('ZDX', 'ZDX = zoladex'), ('OTHR', 'OTHR = other')], max_length=35, verbose_name='Drug:')),
                ('dose_category', models.CharField(blank=True, choices=[('1', '1 = Standard'), ('2', '2 = Reduced Dose'), ('3', '3 = Other ')], max_length=35, null=True, verbose_name='Dose category:')),
                ('start_date', models.DateField(max_length=35, verbose_name='Date that chemotherapy was started:')),
                ('stop_date', models.DateField(blank=True, max_length=35, null=True, verbose_name='Date of last chemotherapy dose:')),
                ('cycle_num', models.CharField(blank=True, choices=[('0', '0'), ('1', '1'), ('2', '2'), ('3', '3'), ('4', '4'), ('5', '5'), ('6', '6'), ('7', '7'), ('8', '8'), ('OTHER', 'other'), ('UNK', 'unknown')], help_text='Enter number of planned cycles or chemotherapy treatments. For continuous treatments (like tamoxifen, leuprolide, hydrooxyurea) record as 1 cycle.', max_length=15, null=True, verbose_name='Number of completed cycles:')),
                ('interval', models.CharField(blank=True, choices=[('1 week', '1 week'), ('2 weeks', '2 weeks'), ('3 weeks', '3 weeks'), ('4 weeks', '4 weeks'), ('OTHER', 'other'), ('UNK', 'unknown')], help_text='Enter number of days between planned cycle (from day 1 of cycle 1 to day 1 of cycle 2). For single cycle treatments or continuous treatments record as -3.', max_length=15, null=True, verbose_name='Interval:')),
                ('specify_other_med', models.CharField(blank=True, max_length=35, null=True, verbose_name='Specify other medication:')),
            ],
            options={
                'verbose_name': 'Chemo Medication Plan',
            },
        ),
        migrations.CreateModel(
            name='ChemoMedRecord',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('drug_code', models.CharField(choices=[('AMOX', 'AMOX = amoxicillin'), ('ALLO', 'ALLO = allopurinol'), ('BLEO', 'BLEO = bleomycin'), ('CARB', 'CARB = carboplatin'), ('CARM', 'CARM = carmustine'), ('CAPC', 'CAPC = capecitabine'), ('CDX', 'CDX = casodex'), ('CIPR', 'CIPR = ciprofloxacin'), ('CISP', 'CISP = cisplatin'), ('CYCL', 'CYCL = cyclophosphamide'), ('CYTB', 'CYTB = cytarabine'), ('CTXM', 'CTXM = cotrimoxazole'), ('DAUN', 'DAUN = daunorubicin,'), ('DCAR', 'DCAR = dacarbazine'), ('DEXA', 'DEXA = dexamethasone'), ('DOX', 'DOXO = doxorubicin'), ('DTAX', 'DTAX = docetaxel'), ('ETOP', 'ETOP = etoposide'), ('FLOR', 'FLOR = fluorouracil'), ('GEMC', 'GEMC = gemcitabine'), ('GLEE', 'GLEE = gleevec'), ('HERC', 'HERC = herception'), ('HYDX', 'HYDX = hydroxyurea'), ('IFOS', 'IFOS = ifosfamide'), ('IRIN', 'IRIN = irinotecan'), ('LEUK', 'LEUK = leukovorin'), ('LEUP', 'LEUP = leuprolide'), ('LDOX', 'LDOX = liposomal doxorubicin'), ('MECH', 'MECH = mechlorethamine'), ('METO', 'METO = metocloperamide (maxolone)'), ('METX', 'METX = methatrexate'), ('MITO', 'MITO = mitoxantrone'), ('OXAL', 'OXAL = oxaliplatin'), ('PROC', 'PROC = procarbazine'), ('PROM', 'PROM = promethazine'), ('PRED', 'PRED = prednisone'), ('PTAX', 'PTAX = paclitaxel'), ('RANT', 'RANT = ranitidine'), ('RITX', 'RITX = Rituximab'), ('TAMX', 'TAMX = tamoxifen'), ('VINC', 'VINC = vincristine'), ('VINB', 'VINB = vinblastine'), ('VINO', 'VINO = vinorelbine'), ('ZDX', 'ZDX = zoladex'), ('OTHR', 'OTHR = other')], max_length=35, verbose_name='Drug:')),
                ('dose_category', models.CharField(blank=True, choices=[('1', '1 = Standard'), ('2', '2 = Reduced Dose'), ('3', '3 = Other ')], max_length=35, null=True, verbose_name='Dose category:')),
                ('start_date', models.DateField(max_length=35, verbose_name='Date that chemotherapy was started:')),
                ('stop_date', models.DateField(blank=True, max_length=35, null=True, verbose_name='Date of last chemotherapy dose:')),
                ('cycle_num', models.CharField(blank=True, choices=[('0', '0'), ('1', '1'), ('2', '2'), ('3', '3'), ('4', '4'), ('5', '5'), ('6', '6'), ('7', '7'), ('8', '8'), ('OTHER', 'other'), ('UNK', 'unknown')], help_text='Enter number of planned cycles or chemotherapy treatments. For continuous treatments (like tamoxifen, leuprolide, hydrooxyurea) record as 1 cycle.', max_length=15, null=True, verbose_name='Number of completed cycles:')),
                ('interval', models.CharField(blank=True, choices=[('1 week', '1 week'), ('2 weeks', '2 weeks'), ('3 weeks', '3 weeks'), ('4 weeks', '4 weeks'), ('OTHER', 'other'), ('UNK', 'unknown')], help_text='Enter number of days between planned cycle (from day 1 of cycle 1 to day 1 of cycle 2). For single cycle treatments or continuous treatments record as -3.', max_length=15, null=True, verbose_name='Interval:')),
                ('specify_other_med', models.CharField(blank=True, max_length=35, null=True, verbose_name='Specify other medication:')),
            ],
            options={
                'verbose_name': 'Chemo Medication Record',
            },
        ),
        migrations.CreateModel(
            name='CurrentSymptoms',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model_validators.date.datetime_not_future, edc_protocol.validators.datetime_not_before_study_start], verbose_name='Report Date')),
                ('any_worry', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('not_sure', 'Not sure')], max_length=15, verbose_name='Does the patient have any symptoms they are worried about?')),
                ('symptom_desc', models.TextField(blank=True, max_length=150, null=True, verbose_name='If so, describe their symptom:')),
                ('patient_own_remedy', models.TextField(blank=True, max_length=250, null=True, verbose_name='What has the patient tried to do about the symptom?')),
                ('severity', models.CharField(choices=[('mild', 'Mild'), ('moderate', 'Moderate'), ('severe', 'Severe')], default='N/A', help_text='If you determine that participant could have Grade 4 illness please assist them to as best as possible by immediately informing the Oncology clinicians and the Study Coordinator.', max_length=250, null=True, verbose_name='Severity:')),
                ('ra_advice', models.TextField(blank=True, max_length=250, null=True, verbose_name='What did the RA do to help?')),
                ('outcome_update', models.TextField(blank=True, max_length=250, null=True, verbose_name='Outcome or Update:')),
            ],
            options={
                'verbose_name': 'Current Symptoms',
                'verbose_name_plural': 'Current Symptoms',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EnrollmentChecklist',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('slug', models.CharField(db_index=True, default='', editable=False, help_text='a field used for quick search', max_length=250, null=True)),
                ('visit_schedule_name', models.CharField(editable=False, help_text='the name of the visit schedule used to find the "schedule"', max_length=25)),
                ('schedule_name', models.CharField(editable=False, max_length=25)),
                ('visit_code', models.CharField(editable=False, max_length=25, null=True)),
                ('visit_code_sequence', models.IntegerField(blank=True, default=0, help_text='An integer to represent the sequence of additional appointments relative to the base appointment, 0, needed to complete data collection for the timepoint. (NNNN.0)', null=True, verbose_name='Sequence')),
                ('timepoint_status', models.CharField(choices=[('open', 'Open'), ('feedback', 'Feedback'), ('closed', 'Closed')], default='open', max_length=15)),
                ('timepoint_opened_datetime', models.DateTimeField(editable=False, help_text="the original calculated model's datetime, updated in the signal", null=True)),
                ('timepoint_closed_datetime', models.DateTimeField(editable=False, null=True)),
                ('timepoint', models.DecimalField(decimal_places=1, help_text='timepoint from schedule', max_digits=6, null=True)),
                ('timepoint_datetime', models.DateTimeField(help_text='Unadjusted datetime calculated from visit schedule', null=True)),
                ('appt_close_datetime', models.DateTimeField(help_text='timepoint_datetime adjusted according to the nearest available datetime for this facility', null=True)),
                ('facility_name', models.CharField(help_text='set by model that creates appointments, e.g. Enrollment', max_length=25)),
                ('appt_datetime', models.DateTimeField(db_index=True, verbose_name='Appointment date and time')),
                ('appt_type', models.CharField(choices=[('clinic', 'In clinic'), ('home', 'At home'), ('hospital', 'In hospital'), ('telephone', 'By telephone')], default='clinic', help_text='Default for subject may be edited Subject Configuration.', max_length=20, verbose_name='Appointment type')),
                ('appt_status', models.CharField(choices=[('new', 'New'), ('in_progress', 'In Progress'), ('incomplete', 'Incomplete'), ('done', 'Done'), ('cancelled', 'Cancelled')], db_index=True, default='new', help_text="If the visit has already begun, only 'in progress' or 'incomplete' are valid options", max_length=25, verbose_name='Status')),
                ('appt_reason', models.CharField(choices=[('scheduled', 'Routine / Scheduled'), ('unscheduled', 'Unscheduled')], max_length=25, verbose_name='Reason for appointment')),
                ('comment', models.CharField(blank=True, max_length=250, verbose_name='Comment')),
                ('is_confirmed', models.BooleanField(default=False, editable=False)),
                ('subject_identifier', models.CharField(blank=True, max_length=50, unique=True, verbose_name='Subject Identifier')),
                ('has_diagnosis', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text="( if 'NO' STOP patient cannot be enrolled )", max_length=3, validators=[edc_base.model_validators.eligibility.eligible_if_yes], verbose_name='Has a cancer diagnosis been documented? ')),
                ('enrollment_site', models.CharField(choices=[('gaborone_private_hospital', ' Gaborone Private Hospital (GPH)'), ('nyangabgwe_referral_Hospital', 'Nyangabgwe Referral Hospital (NRH)'), ('princess_marina_hospital', 'Princess Marina Hospital (PMH)'), ('bokamoso_private_hospital', 'Bokamoso Private Hospital (BPH)')], help_text='Hospital where subject is recruited', max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='HaartMedRecord',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('drug_name', models.CharField(choices=[('ATR', 'Atripla (ATR)'), ('CBV', 'Combivir (CBV)'), ('EFV', 'Efavirenz (EFV)'), ('NVP', 'Nevirapine (NVP)'), ('3TC', 'Lamivudine (3TC)'), ('FTC', 'Emtricitabine (FTC)'), ('AZT_ZDV', 'Zidovudine (AZT or ZDV)'), ('TDF', 'Tenofovir (TDF)'), ('ABC', 'Abacavir (ABC)'), ('D4T', 'Stavudine (D4T)'), ('DDI', 'Didanosine (DDI)'), ('ALU', 'Aluvia/Kaletra (ALU)'), ('DRV', 'Darunavir (DRV)'), ('RAL', 'Raltegravir (RAL)'), ('OTHER', 'Other, specify')], max_length=35, verbose_name='Drug Name:')),
                ('mod_reason', models.CharField(blank=True, choices=[('11', '11 = Initiation (or re-initiation after non-adherence/stockout)'), ('12', '12 = Toxicity decreased/resolved'), ('13', '13 = Vomiting'), ('14', '14 = CNS symptoms (sleep,psych, etc)'), ('15', '15 = Diarrhea'), ('16', '16 = Hypersensitivity/allergic reaction'), ('17', '17 = Hepatotoxicity'), ('18', '18 = Neutropenia'), ('19', '19 = Anemia'), ('20', '20 = Renal failure20 = Renal failure'), ('21', '21 = Other toxicity (specify in comments)'), ('22', '22 = Virologic failure'), ('23', '23 = Immunologic failure (CD4)'), ('24', '24 = Clinical failure'), ('25', '25 = Non-adherence'), ('26', '26 = Interaction with cancer treatment'), ('27', '27 = Death'), ('28', '28 = Other (specify in comments) ')], max_length=65, null=True, verbose_name='Mod Reason:')),
                ('arv_reason', models.CharField(choices=[('1', '1 = Treatment'), ('2', '2 = PMTCT'), ('3', '3 = PEP ')], max_length=25, verbose_name='Reason for ARVs:')),
                ('start_date', models.DateField(help_text='dd/mm/yyyy', max_length=25, verbose_name='Date Started:')),
                ('stop_date', models.DateField(blank=True, help_text='dd/mm/yyyy', max_length=25, null=True, verbose_name='Date Stopped:')),
            ],
            options={
                'verbose_name': 'Haart Medication',
            },
        ),
        migrations.CreateModel(
            name='HaartRecord',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model_validators.date.datetime_not_future, edc_protocol.validators.datetime_not_before_study_start], verbose_name='Report Date')),
                ('haart_status', models.CharField(blank=True, choices=[('never_started_HAART', 'Never started HAART "(skip to Question 4)"'), ('Follow_up_visit', 'Follow-up visit, no modifications since last visit made to HAART treatment "(skip to Question 4)"'), ('enrollment_visit', 'Enrollment visit, patient has taken or is taking HAART "(go to Question 3, record all current and past HAART medications)"'), ('change_in_at_least_one_antiretroviral_medication', 'Change in at least one antiretroviral medication (dose modification, discontinuation, temporary hold, change of medication) "(go to Question 3)"')], max_length=145, null=True, verbose_name="What is the status of the participant's antiretroviral treatment (HAART)?")),
                ('comments', models.TextField(blank=True, max_length=150, null=True, verbose_name='Comments')),
            ],
            options={
                'verbose_name': 'Haart Record',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='HistoricalAppointment',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('visit_schedule_name', models.CharField(editable=False, help_text='the name of the visit schedule used to find the "schedule"', max_length=25)),
                ('schedule_name', models.CharField(editable=False, max_length=25)),
                ('visit_code', models.CharField(editable=False, max_length=25, null=True)),
                ('visit_code_sequence', models.IntegerField(blank=True, default=0, help_text='An integer to represent the sequence of additional appointments relative to the base appointment, 0, needed to complete data collection for the timepoint. (NNNN.0)', null=True, verbose_name='Sequence')),
                ('timepoint_status', models.CharField(choices=[('open', 'Open'), ('feedback', 'Feedback'), ('closed', 'Closed')], default='open', max_length=15)),
                ('timepoint_opened_datetime', models.DateTimeField(editable=False, help_text="the original calculated model's datetime, updated in the signal", null=True)),
                ('timepoint_closed_datetime', models.DateTimeField(editable=False, null=True)),
                ('timepoint', models.DecimalField(decimal_places=1, help_text='timepoint from schedule', max_digits=6, null=True)),
                ('timepoint_datetime', models.DateTimeField(help_text='Unadjusted datetime calculated from visit schedule', null=True)),
                ('appt_close_datetime', models.DateTimeField(help_text='timepoint_datetime adjusted according to the nearest available datetime for this facility', null=True)),
                ('facility_name', models.CharField(help_text='set by model that creates appointments, e.g. Enrollment', max_length=25)),
                ('appt_datetime', models.DateTimeField(db_index=True, verbose_name='Appointment date and time')),
                ('appt_type', models.CharField(choices=[('clinic', 'In clinic'), ('home', 'At home'), ('hospital', 'In hospital'), ('telephone', 'By telephone')], default='clinic', help_text='Default for subject may be edited Subject Configuration.', max_length=20, verbose_name='Appointment type')),
                ('appt_status', models.CharField(choices=[('new', 'New'), ('in_progress', 'In Progress'), ('incomplete', 'Incomplete'), ('done', 'Done'), ('cancelled', 'Cancelled')], db_index=True, default='new', help_text="If the visit has already begun, only 'in progress' or 'incomplete' are valid options", max_length=25, verbose_name='Status')),
                ('appt_reason', models.CharField(choices=[('scheduled', 'Routine / Scheduled'), ('unscheduled', 'Unscheduled')], max_length=25, verbose_name='Reason for appointment')),
                ('comment', models.CharField(blank=True, max_length=250, verbose_name='Comment')),
                ('is_confirmed', models.BooleanField(default=False, editable=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical ',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalEnrollmentChecklist',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('slug', models.CharField(db_index=True, default='', editable=False, help_text='a field used for quick search', max_length=250, null=True)),
                ('visit_schedule_name', models.CharField(editable=False, help_text='the name of the visit schedule used to find the "schedule"', max_length=25)),
                ('schedule_name', models.CharField(editable=False, max_length=25)),
                ('visit_code', models.CharField(editable=False, max_length=25, null=True)),
                ('visit_code_sequence', models.IntegerField(blank=True, default=0, help_text='An integer to represent the sequence of additional appointments relative to the base appointment, 0, needed to complete data collection for the timepoint. (NNNN.0)', null=True, verbose_name='Sequence')),
                ('timepoint_status', models.CharField(choices=[('open', 'Open'), ('feedback', 'Feedback'), ('closed', 'Closed')], default='open', max_length=15)),
                ('timepoint_opened_datetime', models.DateTimeField(editable=False, help_text="the original calculated model's datetime, updated in the signal", null=True)),
                ('timepoint_closed_datetime', models.DateTimeField(editable=False, null=True)),
                ('timepoint', models.DecimalField(decimal_places=1, help_text='timepoint from schedule', max_digits=6, null=True)),
                ('timepoint_datetime', models.DateTimeField(help_text='Unadjusted datetime calculated from visit schedule', null=True)),
                ('appt_close_datetime', models.DateTimeField(help_text='timepoint_datetime adjusted according to the nearest available datetime for this facility', null=True)),
                ('facility_name', models.CharField(help_text='set by model that creates appointments, e.g. Enrollment', max_length=25)),
                ('appt_datetime', models.DateTimeField(db_index=True, verbose_name='Appointment date and time')),
                ('appt_type', models.CharField(choices=[('clinic', 'In clinic'), ('home', 'At home'), ('hospital', 'In hospital'), ('telephone', 'By telephone')], default='clinic', help_text='Default for subject may be edited Subject Configuration.', max_length=20, verbose_name='Appointment type')),
                ('appt_status', models.CharField(choices=[('new', 'New'), ('in_progress', 'In Progress'), ('incomplete', 'Incomplete'), ('done', 'Done'), ('cancelled', 'Cancelled')], db_index=True, default='new', help_text="If the visit has already begun, only 'in progress' or 'incomplete' are valid options", max_length=25, verbose_name='Status')),
                ('appt_reason', models.CharField(choices=[('scheduled', 'Routine / Scheduled'), ('unscheduled', 'Unscheduled')], max_length=25, verbose_name='Reason for appointment')),
                ('comment', models.CharField(blank=True, max_length=250, verbose_name='Comment')),
                ('is_confirmed', models.BooleanField(default=False, editable=False)),
                ('subject_identifier', models.CharField(blank=True, db_index=True, max_length=50, verbose_name='Subject Identifier')),
                ('has_diagnosis', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text="( if 'NO' STOP patient cannot be enrolled )", max_length=3, validators=[edc_base.model_validators.eligibility.eligible_if_yes], verbose_name='Has a cancer diagnosis been documented? ')),
                ('enrollment_site', models.CharField(choices=[('gaborone_private_hospital', ' Gaborone Private Hospital (GPH)'), ('nyangabgwe_referral_Hospital', 'Nyangabgwe Referral Hospital (NRH)'), ('princess_marina_hospital', 'Princess Marina Hospital (PMH)'), ('bokamoso_private_hospital', 'Bokamoso Private Hospital (BPH)')], help_text='Hospital where subject is recruited', max_length=100, null=True)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical ',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalSubjectConsent',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('subject_identifier_as_pk', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('subject_identifier_aka', models.CharField(editable=False, help_text='track a previously allocated identifier.', max_length=50, null=True, verbose_name='Subject Identifier a.k.a')),
                ('citizen', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Is the participant a Botswana citizen? ')),
                ('legal_marriage', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', help_text="If 'No', participant may not be consented.", max_length=3, null=True, verbose_name='If not a citizen, is the participant legally married to a Botswana citizen?')),
                ('marriage_certificate', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', help_text="If 'No', participant may not be consented.", max_length=3, null=True, verbose_name='[Interviewer] Has the participant produced the marriage certificate as proof? ')),
                ('marriage_certificate_no', models.CharField(blank=True, help_text='e.g. 000/YYYY', max_length=9, null=True, verbose_name='What is the marriage certificate number?')),
                ('identity', django_crypto_fields.fields.identity_field.IdentityField(help_text=' (Encryption: RSA local)', max_length=71, verbose_name='Identity number')),
                ('identity_type', models.CharField(max_length=25, verbose_name='What type of identity number is this?')),
                ('confirm_identity', django_crypto_fields.fields.identity_field.IdentityField(help_text='Retype the identity number (Encryption: RSA local)', max_length=71, null=True)),
                ('first_name', django_crypto_fields.fields.firstname_field.FirstnameField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True)),
                ('last_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Last name')),
                ('initials', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[django.core.validators.RegexValidator(message='Ensure initials consist of letters only in upper case, no spaces.', regex='^[A-Z]{2,3}$')])),
                ('dob', models.DateField(null=True, verbose_name='Date of birth')),
                ('is_dob_estimated', edc_base.model_fields.date_estimated.IsDateEstimatedField(choices=[('-', 'No'), ('D', 'Yes, estimated the Day'), ('MD', 'Yes, estimated Month and Day'), ('YMD', 'Yes, estimated Year, Month and Day')], help_text='If the exact date is not known, please indicate which part of the date is estimated.', max_length=25, null=True, verbose_name='Is date of birth estimated?')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('U', 'Undetermined')], max_length=1, null=True, verbose_name='Gender')),
                ('guardian_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text="Required only if participant is a minor.<BR>Format is 'LASTNAME, FIRSTNAME'. All uppercase separated by a comma. (Encryption: RSA local)", max_length=71, null=True, validators=[edc_consent.validators.FullNameValidator()], verbose_name="Guardian's last and first name")),
                ('subject_type', models.CharField(max_length=25)),
                ('consent_reviewed', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If no, participant is not eligible.', max_length=3, null=True, validators=[edc_consent.validators.eligible_if_yes], verbose_name='I have reviewed the consent with the participant')),
                ('study_questions', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If no, participant is not eligible.', max_length=3, null=True, validators=[edc_consent.validators.eligible_if_yes], verbose_name='I have answered all questions the participant had about the study')),
                ('assessment_score', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If no, participant is not eligible.', max_length=3, null=True, validators=[edc_consent.validators.eligible_if_yes], verbose_name='I have asked the participant questions about this study and the participant has demonstrated understanding')),
                ('consent_signature', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If no, participant is not eligible.', max_length=3, null=True, validators=[edc_consent.validators.eligible_if_yes], verbose_name='I have verified that the participant has signed the consent form')),
                ('consent_copy', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Declined', 'Yes, but subject declined copy')], help_text='If declined, return copy with the consent', max_length=20, null=True, validators=[edc_consent.validators.eligible_if_yes_or_declined], verbose_name='I have provided the participant with a copy of their signed informed consent')),
                ('may_store_genetic_samples', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Does the participant agree that a portion of the blood sample that is taken be stored for genetic analysis?')),
                ('may_store_samples', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Does the participant agree to have samples stored after the study has ended')),
                ('is_incarcerated', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text="( if 'Yes' STOP participant cannot be consented )", max_length=3, null=True, validators=[edc_consent.validators.eligible_if_no], verbose_name='Is the participant under involuntary incarceration?')),
                ('is_literate', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text="If 'No' provide witness's name on this form and signature on the paper document.", max_length=3, verbose_name='Is the participant literate?')),
                ('witness_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text="Required only if participant is illiterate.<br>Format is 'LASTNAME, FIRSTNAME'. All uppercase separated by a comma. (Encryption: RSA local)", max_length=71, null=True, validators=[edc_consent.validators.FullNameValidator()], verbose_name="Witness's last and first name")),
                ('language', models.CharField(choices=[('af', 'Afrikaans'), ('ar', 'Arabic'), ('ast', 'Asturian'), ('az', 'Azerbaijani'), ('bg', 'Bulgarian'), ('be', 'Belarusian'), ('bn', 'Bengali'), ('br', 'Breton'), ('bs', 'Bosnian'), ('ca', 'Catalan'), ('cs', 'Czech'), ('cy', 'Welsh'), ('da', 'Danish'), ('de', 'German'), ('dsb', 'Lower Sorbian'), ('el', 'Greek'), ('en', 'English'), ('en-au', 'Australian English'), ('en-gb', 'British English'), ('eo', 'Esperanto'), ('es', 'Spanish'), ('es-ar', 'Argentinian Spanish'), ('es-co', 'Colombian Spanish'), ('es-mx', 'Mexican Spanish'), ('es-ni', 'Nicaraguan Spanish'), ('es-ve', 'Venezuelan Spanish'), ('et', 'Estonian'), ('eu', 'Basque'), ('fa', 'Persian'), ('fi', 'Finnish'), ('fr', 'French'), ('fy', 'Frisian'), ('ga', 'Irish'), ('gd', 'Scottish Gaelic'), ('gl', 'Galician'), ('he', 'Hebrew'), ('hi', 'Hindi'), ('hr', 'Croatian'), ('hsb', 'Upper Sorbian'), ('hu', 'Hungarian'), ('ia', 'Interlingua'), ('id', 'Indonesian'), ('io', 'Ido'), ('is', 'Icelandic'), ('it', 'Italian'), ('ja', 'Japanese'), ('ka', 'Georgian'), ('kab', 'Kabyle'), ('kk', 'Kazakh'), ('km', 'Khmer'), ('kn', 'Kannada'), ('ko', 'Korean'), ('lb', 'Luxembourgish'), ('lt', 'Lithuanian'), ('lv', 'Latvian'), ('mk', 'Macedonian'), ('ml', 'Malayalam'), ('mn', 'Mongolian'), ('mr', 'Marathi'), ('my', 'Burmese'), ('nb', 'Norwegian Bokmål'), ('ne', 'Nepali'), ('nl', 'Dutch'), ('nn', 'Norwegian Nynorsk'), ('os', 'Ossetic'), ('pa', 'Punjabi'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pt-br', 'Brazilian Portuguese'), ('ro', 'Romanian'), ('ru', 'Russian'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('sq', 'Albanian'), ('sr', 'Serbian'), ('sr-latn', 'Serbian Latin'), ('sv', 'Swedish'), ('sw', 'Swahili'), ('ta', 'Tamil'), ('te', 'Telugu'), ('th', 'Thai'), ('tr', 'Turkish'), ('tt', 'Tatar'), ('udm', 'Udmurt'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('vi', 'Vietnamese'), ('zh-hans', 'Simplified Chinese'), ('zh-hant', 'Traditional Chinese')], help_text='The language used for the consent process will also be used during data collection.', max_length=25, verbose_name='Language of consent')),
                ('is_verified', models.BooleanField(default=False, editable=False)),
                ('is_verified_datetime', models.DateTimeField(editable=False, null=True)),
                ('verified_by', models.CharField(editable=False, max_length=25, null=True)),
                ('consent_datetime', models.DateTimeField(validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Consent date and time')),
                ('report_datetime', models.DateTimeField(editable=False, null=True)),
                ('version', models.CharField(editable=False, help_text="See 'Consent Type' for consent versions by period.", max_length=10, verbose_name='Consent version')),
                ('updates_versions', models.BooleanField(default=False)),
                ('sid', models.CharField(blank=True, editable=False, help_text='Used for randomization against a prepared rando-list.', max_length=15, null=True, verbose_name='SID')),
                ('comment', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=250, null=True, verbose_name='Comment')),
                ('dm_comment', models.CharField(editable=False, help_text='see also edc.data manager.', max_length=150, null=True, verbose_name='Data Management comment')),
                ('consent_identifier', models.UUIDField(default=uuid.uuid4, editable=False, help_text='A unique identifier for this consent instance')),
                ('slug', models.CharField(db_index=True, default='', editable=False, help_text='a field used for quick search', max_length=250, null=True)),
                ('is_signed', models.BooleanField(default=False, editable=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('site', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.Site')),
            ],
            options={
                'verbose_name': 'historical ',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalSubjectLocator',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('subject_identifier', models.CharField(db_index=True, max_length=50, verbose_name='Subject Identifier')),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('may_call', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Has the participant given permission <b>to contacted by telephone or cell</b> by study staff for follow-up purposes during the study?')),
                ('may_visit_home', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Has the participant given permission for study staff <b>to make home visits</b> for follow-up purposes?')),
                ('may_sms', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, null=True, verbose_name='Has the participant given permission <b>to be contacted by SMS</b> by study staff for follow-up purposes during the study?')),
                ('mail_address', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=500, null=True, verbose_name='Mailing address ')),
                ('physical_address', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=500, null=True, verbose_name='Physical address with detailed description')),
                ('subject_cell', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Cell number')),
                ('subject_cell_alt', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Cell number (alternate)')),
                ('subject_phone', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.TelephoneNumber], verbose_name='Telephone')),
                ('subject_phone_alt', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.TelephoneNumber], verbose_name='Telephone (alternate)')),
                ('may_contact_indirectly', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='For example a partner, spouse, family member, neighbour ...', max_length=25, verbose_name='Has the participant given permission for study staff <b>to contact anyone else</b> for follow-up purposes during the study?')),
                ('indirect_contact_name', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Full names of the contact person')),
                ('indirect_contact_relation', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Relationship to participant')),
                ('indirect_contact_physical_address', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=500, null=True, verbose_name='Full physical address ')),
                ('indirect_contact_cell', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Cell number')),
                ('indirect_contact_cell_alt', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Cell number (alternative)')),
                ('indirect_contact_phone', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.TelephoneNumber], verbose_name='Telephone number')),
                ('may_call_work', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Has the participant given permission to contacted <b>at work</b> by telephone or cell by study staff for follow-up purposes during the study?')),
                ('subject_work_place', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=250, null=True, verbose_name='Name and location of work place')),
                ('subject_work_phone', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.TelephoneNumber], verbose_name='Work contact telephone')),
                ('subject_work_cell', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Work contact cell number')),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow)),
                ('home_visit_permission', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Has the participant given his/her permission for studystaff to make home visits for follow-up purposes?')),
                ('alt_contact_cell_number', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Cell number (alternate)')),
                ('has_alt_contact', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=25, verbose_name='If we are unable to contact the person indicated above, is there another individual (including next of kin) with whom the study team can get in contact with?')),
                ('alt_contact_name', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text='include first name and surname (Encryption: RSA local)', max_length=71, null=True, verbose_name='Full Name of the responsible person')),
                ('alt_contact_rel', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Relationship to participant')),
                ('alt_contact_cell', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Cell number')),
                ('other_alt_contact_cell', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Cell number (alternate)')),
                ('alt_contact_tel', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.TelephoneNumber], verbose_name='Telephone number')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical ',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalSubjectOffstudy',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('subject_identifier', models.CharField(db_index=True, max_length=50, verbose_name='Subject Identifier')),
                ('visit_schedule_name', models.CharField(editable=False, help_text='the name of the visit schedule used to find the "schedule"', max_length=25)),
                ('schedule_name', models.CharField(editable=False, max_length=25)),
                ('offstudy_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Off-study date and time')),
                ('offstudy_reason', models.CharField(choices=[('lost', 'Lost to follow-up'), ('completed protocol', 'Completed protocol'), ('consent_withdrawal', 'Completed protocol'), ('dead', 'Deceased')], max_length=125, verbose_name='Please code the primary reason participant taken off-study')),
                ('offstudy_reason_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical ',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalSubjectVisit',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('visit_schedule_name', models.CharField(editable=False, help_text='the name of the visit schedule used to find the "schedule"', max_length=25)),
                ('schedule_name', models.CharField(editable=False, max_length=25)),
                ('visit_code', models.CharField(editable=False, max_length=25, null=True)),
                ('visit_code_sequence', models.IntegerField(blank=True, default=0, help_text='An integer to represent the sequence of additional appointments relative to the base appointment, 0, needed to complete data collection for the timepoint. (NNNN.0)', null=True, verbose_name='Sequence')),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text='Date and time of this report', validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Visit Date and Time')),
                ('reason', models.CharField(max_length=25, verbose_name='What is the reason for this visit?')),
                ('reason_unscheduled', models.CharField(choices=[('patient_unwell_outpatient', 'Patient unwell (outpatient)'), ('patient_hospitalised', 'Patient hospitalised'), ('OTHER', 'Other'), ('N/A', 'Not applicable')], default='N/A', max_length=25, verbose_name="If 'Unscheduled' above, provide reason for the unscheduled visit")),
                ('reason_unscheduled_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=25, null=True, verbose_name='If "Other" reason for unscheduled visit, specify')),
                ('reason_missed', models.CharField(blank=True, max_length=35, null=True, verbose_name="If 'Missed' above, provide the reason the scheduled visit was missed")),
                ('reason_missed_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=25, null=True, verbose_name='If "Other" reason for missed visit, specify')),
                ('study_status', models.CharField(max_length=50, null=True, verbose_name="What is the participant's current study status")),
                ('require_crfs', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='Yes', max_length=10, verbose_name='Are scheduled data being submitted with this visit?')),
                ('info_source', models.CharField(max_length=25, verbose_name='What is the main source of this information?')),
                ('info_source_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If "Other" source of information, specify')),
                ('survival_status', models.CharField(choices=[('alive', 'Alive'), ('dead', 'Deceased'), ('unknown', 'Unknown')], default='alive', max_length=10, null=True, verbose_name="Participant's survival status")),
                ('last_alive_date', models.DateField(blank=True, null=True, validators=[edc_protocol.validators.date_not_before_study_start, edc_base.model_validators.date.date_not_future], verbose_name='Date participant last known alive')),
                ('comments', models.TextField(blank=True, max_length=250, null=True, verbose_name='Comment if any additional pertinent information about the participant')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('appointment', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='cancer_subject.Appointment')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical ',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='IdentifierHistory',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
            ],
            options={
                'ordering': ('-modified', '-created'),
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='InfoDeterminant',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, help_text='(suggest 40 characters max.)', max_length=250, unique=True, verbose_name='Name')),
                ('short_name', models.CharField(db_index=True, help_text='This is the stored value, required', max_length=250, unique=True, verbose_name='Stored value')),
                ('display_index', models.IntegerField(db_index=True, default=0, help_text='Index to control display order if not alphabetical, not required', verbose_name='display index')),
                ('field_name', models.CharField(blank=True, editable=False, help_text='Not required', max_length=25, null=True)),
                ('version', models.CharField(default='1.0', editable=False, max_length=35)),
            ],
            options={
                'ordering': ['display_index', 'name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LabResult',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model_validators.date.datetime_not_future, edc_protocol.validators.datetime_not_before_study_start], verbose_name='Report Date')),
                ('has_hiv_result', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Are there any new HIV TEST results that have not been previously reported?')),
                ('has_cd4', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Are there any new CD4 CELL COUNT results that have not been previously reported?')),
                ('has_vl', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Are there any new HIV VIRAL LOAD results that have not been previously reported?')),
                ('has_haem', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Are there any new HAEMOTOLOGY results that have not been previously reported?')),
                ('has_chem', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Are there any new CHEMISTRY results that have not been previously reported?')),
                ('has_other_abnormal', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Are there any new OTHER ABNORMAL laboratory results not been previously reported that have changed or delayed planned treatment?')),
                ('other_abnormal', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('abnormal_lab_results', models.CharField(max_length=65, verbose_name='Other abnormal lab results changing or delaying planned treatment (record test, date, result and units)')),
                ('tb_tests', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Are there any tuberculosis diagnostic tests that have not been previously reported?')),
                ('tb_prompt_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
            ],
            options={
                'verbose_name': 'Lab Result',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LabResultCd4',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model_validators.date.datetime_not_future, edc_protocol.validators.datetime_not_before_study_start], verbose_name='Report Date')),
                ('cd4_drawn_date', models.DateField(max_length=25, verbose_name='Date of CD4 cell count')),
                ('cd4_result', models.DecimalField(decimal_places=2, max_digits=6, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(3000)], verbose_name='CD4 cell count result')),
            ],
            options={
                'verbose_name': 'Lab Result: CD4',
                'verbose_name_plural': 'Lab Result: CD4',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LabResultChemistry',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model_validators.date.datetime_not_future, edc_protocol.validators.datetime_not_before_study_start], verbose_name='Report Date')),
                ('chem_drawn_date', models.DateField(blank=True, max_length=25, null=True, verbose_name='Date of chemistry specimen draw:')),
                ('alanine', models.DecimalField(blank=True, decimal_places=1, help_text='U/L', max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(9000)], verbose_name='Alanine aminotransferase (ALT or SGPT):')),
                ('aspartate', models.DecimalField(blank=True, decimal_places=1, help_text='U/L', max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(9000)], verbose_name='Aspartate aminotransferase (AST or SGOT):')),
                ('bilirubin', models.DecimalField(blank=True, decimal_places=1, help_text='mg/dL', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Bilirubin:')),
                ('creatinine', models.DecimalField(blank=True, decimal_places=1, help_text='umol/L', max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(9000)], verbose_name='Creatinine:')),
                ('lactate', models.DecimalField(blank=True, decimal_places=1, help_text='IU/L', max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(9000)], verbose_name='Lactate Dehydrogenase (LDH):')),
                ('comments', models.TextField(blank=True, help_text='if other data not recorded, explain why', max_length=100, null=True, verbose_name='Comments:')),
            ],
            options={
                'verbose_name': 'Lab Result: Chemistry',
                'verbose_name_plural': 'Lab Result: Chemistry',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LabResultHaematology',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model_validators.date.datetime_not_future, edc_protocol.validators.datetime_not_before_study_start], verbose_name='Report Date')),
                ('haem_drawn_date', models.DateField(blank=True, max_length=25, null=True, verbose_name='Date of haematology specimen draw')),
                ('hgb', models.DecimalField(blank=True, decimal_places=1, help_text='mg/dL', max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(30)], verbose_name='Haemoglobin')),
                ('mcv', models.DecimalField(blank=True, decimal_places=1, help_text='microL', max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(40), django.core.validators.MaxValueValidator(150)], verbose_name='Mean corpuscular volume (MCV):')),
                ('wbc_count', models.DecimalField(blank=True, decimal_places=2, help_text='cells/microL', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(500)], verbose_name='White blood cell (WBC) count :')),
                ('anc_count', models.DecimalField(blank=True, decimal_places=3, help_text='cells/microL', max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(500)], verbose_name='Absolute neutrophil count (ANC) :')),
                ('platelet', models.DecimalField(blank=True, decimal_places=1, help_text='cells/microL', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(3000)], verbose_name='Platelet count:')),
                ('comments', models.TextField(blank=True, help_text='if other data not recorded, explain why', max_length=100, null=True, verbose_name='Comments:')),
            ],
            options={
                'verbose_name': 'Lab Result: Haematology',
                'verbose_name_plural': 'Lab Result: Haematology',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LabResultHeightWeight',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model_validators.date.datetime_not_future, edc_protocol.validators.datetime_not_before_study_start], verbose_name='Report Date')),
                ('weight', models.DecimalField(blank=True, decimal_places=1, help_text='kg', max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(15), django.core.validators.MaxValueValidator(400)], verbose_name='Weight')),
                ('height', models.DecimalField(blank=True, decimal_places=1, help_text='cm', max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(50), django.core.validators.MaxValueValidator(250)], verbose_name='Height:')),
                ('cough2weeks', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Does the participant have cough (>2 weeks) OR weight loss OR drenching night sweats (need to change bed clothes/sheets)?')),
            ],
            options={
                'verbose_name': 'Lab Result: Height & Weight',
                'verbose_name_plural': 'Lab Result: Height & Weight',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LabResultHiv',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model_validators.date.datetime_not_future, edc_protocol.validators.datetime_not_before_study_start], verbose_name='Report Date')),
                ('test_date', models.DateField(blank=True, max_length=25, null=True, verbose_name='Date of HIV test')),
                ('test_result', models.CharField(choices=[('POS', 'Reactive'), ('NEG', 'Non-Reactive')], max_length=15, verbose_name='HIV test result')),
            ],
            options={
                'verbose_name': 'Lab Result: HIV',
                'verbose_name_plural': 'Lab Result: HIV',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LabResultTb',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model_validators.date.datetime_not_future, edc_protocol.validators.datetime_not_before_study_start], verbose_name='Report Date')),
                ('tb_description', models.CharField(max_length=65, verbose_name='Describe tubercolosis diagnostic test results (record test, date, result and units)')),
                ('tb_treatment', models.CharField(choices=[('No', 'No'), ('Yes_(IPT)', 'Yes, isoniazid preventative therapy (IPT)'), ('Yes_(ATT)', 'Yes, combination anti-tuberculosis treatment (ATT)')], max_length=50, verbose_name='Is participant being treated for tuberculosis now?')),
                ('tb_treatment_start', models.DateField(blank=True, max_length=25, null=True, verbose_name="When did the participant's treatment for tuberculosis begin?")),
            ],
            options={
                'verbose_name': 'Lab Result: Tubercolosis',
                'verbose_name_plural': 'Lab Result: Tubercolosis',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LabResultViralload',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model_validators.date.datetime_not_future, edc_protocol.validators.datetime_not_before_study_start], verbose_name='Report Date')),
                ('vl_drawn_date', models.DateField(max_length=25, verbose_name='8. Date of HIV viral load')),
                ('vl_result', models.CharField(max_length=25, validators=[django.core.validators.RegexValidator('^[<>=]{1}\\d+$', 'Result must include                                    the quantifier (<, > or =) followed by                                    the numeric value')], verbose_name='9. HIV viral load result')),
            ],
            options={
                'verbose_name': 'Lab Result: Viral Load',
                'verbose_name_plural': 'Lab Result: Viral Load',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OncologyTreatmentCompleted',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model_validators.date.datetime_not_future, edc_protocol.validators.datetime_not_before_study_start], verbose_name='Report Date')),
                ('patient_had_chemo', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('not_sure', 'Not sure')], max_length=15, verbose_name='Has the patient had chemotherapy?')),
                ('patient_had_radiation', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('not_sure', 'Not sure')], max_length=15, verbose_name='Has the patient had radiation therapy?')),
                ('patient_had_surgery', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('not_sure', 'Not sure')], max_length=15, verbose_name='Has the patient had surgery?')),
                ('treatment_detail', models.TextField(blank=True, help_text='(dates, cycles, drugs, order of treatment, etc)', max_length=150, null=True, verbose_name='Describe any details of the treatment?')),
                ('patient_follow_up', models.CharField(choices=[('PMH', 'Princess Marina Hospital'), ('NRH', 'Nyangabgwe Referral Hospital'), ('SEROWE', 'Serowe'), ('MAUN', 'Maun'), ('OTHER', 'Other, specify:')], max_length=35, verbose_name='Where is the patient being followed?')),
                ('patient_follow_up_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('next_followup', models.TextField(max_length=50, verbose_name='When does the patient have their next follow-up appointment?')),
            ],
            options={
                'verbose_name': 'Oncology Treatment Completed',
                'verbose_name_plural': 'Oncology Treatment Completed',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OncologyTreatmentPlan',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model_validators.date.datetime_not_future, edc_protocol.validators.datetime_not_before_study_start], verbose_name='Report Date')),
                ('treatment_goal', models.CharField(choices=[('curative', 'Curative'), ('palliative', 'Palliative'), ('UNK', 'Unknown')], max_length=15, verbose_name='What is the goal of cancer treatment?')),
                ('treatment_plan', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Has a treatment plan been determined?')),
                ('chemotherapy', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, null=True, verbose_name='Is chemotherapy planned?')),
                ('chemo_intent', models.CharField(blank=True, choices=[('Standard', 'Standard'), ('adjuvant', 'Adjuvant'), ('neo_adjuvant', 'Neo-Adjuvant'), ('concurrent_with_radiation', 'Concurrent with radiation')], max_length=25, null=True, verbose_name='What was the intent of giving chemotherapy?')),
                ('radiation_plan', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, null=True, verbose_name='Is radiation therapy planned?')),
                ('surgical_plan', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, null=True, verbose_name='Is surgical therapy planned?')),
                ('planned_operation', models.CharField(blank=True, max_length=150, null=True, verbose_name='Describe planned operation')),
                ('comments', models.CharField(blank=True, max_length=350, null=True, verbose_name='Comments')),
            ],
            options={
                'verbose_name': 'Oncology Treatment Plan',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OncologyTreatmentRecord',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model_validators.date.datetime_not_future, edc_protocol.validators.datetime_not_before_study_start], verbose_name='Report Date')),
                ('chemo_received', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Has the patient COMPLETED chemotherapy?')),
                ('radiation_received', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Did the patient COMPLETE radiation therapy?')),
                ('surgical_therapy', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Did patient COMPLETE surgical therapy?')),
                ('comments', models.CharField(blank=True, max_length=35, null=True, verbose_name='Comments:')),
            ],
            options={
                'verbose_name': 'Oncology Treatment Record',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OTRChemo',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model_validators.date.datetime_not_future, edc_protocol.validators.datetime_not_before_study_start], verbose_name='Report Date')),
                ('chemo_intent', models.CharField(choices=[('Standard', 'Standard'), ('adjuvant', 'Adjuvant'), ('neo_adjuvant', 'Neo-Adjuvant'), ('concurrent_with_radiation', 'Concurrent with radiation')], max_length=25, verbose_name='What was the intent of giving chemotherapy?')),
                ('chemo_delays', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Were any of the chemotherapy doses/cycles delayed?')),
                ('why_delayed', models.CharField(blank=True, choices=[('heme_tox', 'Toxicity - hematologic (anemia, neutropenia, or thromobcytopenia)'), ('hepato_tox', 'Toxicity - hepatitis (jaundice, increased bilirubin, ALT/AST, etc.) '), ('renal_tox', 'Toxicity - renal failure (increased creatinine, swelling, etc)'), ('other_tox', 'Toxicity - other, specify '), ('no_response', 'Cancer not responding to treatment'), ('default', 'Defaulted visit or lost-to-follow-up'), ('outage', 'Outage of medication, supplies, laboratory results'), ('clinic_busy', 'Clinic too busy to accommodate'), ('OTHER', 'Other, specify:')], max_length=65, verbose_name='Why were the chemotherapy doses/cycles delayed?')),
                ('why_delayed_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('chemo_reduced', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Were any of the chemotherapy doses (or number of cycles) reduced?')),
                ('why_reduced', models.CharField(blank=True, choices=[('heme_tox', 'Toxicity - hematologic (anemia, neutropenia, or thromobcytopenia)'), ('hepat_tox', 'Toxicity - hepatitis (jaundice, increased bilirubin, ALT/AST, etc.)'), ('rena_tox', 'Toxicity - renal failure (increased creatinine, swelling, etc)'), ('othe_tox', 'Toxicity - other, specify '), ('no_response', 'Cancer not responding to treatment'), ('default', 'Defaulted visit or lost-to-follow-up'), ('outage', 'Outage of medication, supplies, laboratory results'), ('clinic_busy', 'Clinic too busy to accommodate'), ('standard_protocol', 'Dose reduced due to standard protocol (i.e. reduced intensity CHOP)'), ('OTHER', 'Other, specify:')], max_length=75, verbose_name='Why were the chemotherapy doses (or number of cycles) reduced?')),
                ('why_reduced_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
            ],
            options={
                'verbose_name': 'OTR: Chemotherapy',
                'verbose_name_plural': 'OTR: Chemotherapy',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OTRRadiation',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model_validators.date.datetime_not_future, edc_protocol.validators.datetime_not_before_study_start], verbose_name='Report Date')),
                ('radiation_details', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Are there radiation details available?')),
            ],
            options={
                'verbose_name': 'OTR: Radiation',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OTRSurgical',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model_validators.date.datetime_not_future, edc_protocol.validators.datetime_not_before_study_start], verbose_name='Report Date')),
                ('operation_performed', models.CharField(max_length=100, verbose_name='What operation was performed?: ')),
                ('date_operation', models.DateField(blank=True, max_length=15, null=True, verbose_name='Date of operation?')),
            ],
            options={
                'verbose_name': 'OTR: Surgical',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RadiationSideEffects',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, help_text='(suggest 40 characters max.)', max_length=250, unique=True, verbose_name='Name')),
                ('short_name', models.CharField(db_index=True, help_text='This is the stored value, required', max_length=250, unique=True, verbose_name='Stored value')),
                ('display_index', models.IntegerField(db_index=True, default=0, help_text='Index to control display order if not alphabetical, not required', verbose_name='display index')),
                ('field_name', models.CharField(blank=True, editable=False, help_text='Not required', max_length=25, null=True)),
                ('version', models.CharField(default='1.0', editable=False, max_length=35)),
            ],
            options={
                'ordering': ['display_index', 'name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RadiationTreatment',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model_validators.date.datetime_not_future, edc_protocol.validators.datetime_not_before_study_start], verbose_name='Report Date')),
                ('treatment_start_date', models.DateField(blank=True, max_length=25, null=True, verbose_name='Treatment start date')),
                ('treatment_end_date', models.DateField(blank=True, max_length=25, null=True, verbose_name='Treatment end date')),
                ('tumour_stages', models.CharField(blank=True, choices=[('X', 'X'), ('0', '0'), ('1', '1'), ('2', '2'), ('3', '3'), ('4', '4')], help_text="For Kaposi's record T here, 0 or 1", max_length=15, null=True, verbose_name='TNM system- Tumour (T) stage recorded in radiation records:')),
                ('lymph_stages', models.CharField(blank=True, choices=[('X', 'X'), ('0', '0'), ('1', '1'), ('2', '2'), ('3', '3'), ('4', '4')], help_text="For Kaposi's record I here, 0 or 1", max_length=15, null=True, verbose_name='TNM system- Lymph Nodes (N) stage recorded in radiation records:')),
                ('metastasis_stages', models.CharField(blank=True, choices=[('X', 'X'), ('0', '0'), ('1', '1'), ('2', '2'), ('3', '3'), ('4', '4')], help_text="For Kaposi's record S here, 0 or 1", max_length=15, null=True, verbose_name='TNM system- Metastasis (M) stage recorded in radiation records:')),
                ('overall_stages', models.CharField(blank=True, choices=[('X', 'X'), ('0', '0'), ('1', '1'), ('2', '2'), ('3', '3'), ('4', '4')], help_text="For lymphomas, report Ann Arbor Stage here. For Kaposi's, report ACTG Stage here.", max_length=15, null=True, verbose_name='Overall cancer stage')),
                ('stage_modifier', models.CharField(blank=True, choices=[('X', 'X'), ('A', 'A'), ('B', 'B'), ('C', 'C'), ('D', 'D')], help_text="For lymphomas, report Ann Arbor Stage here.For Kaposi's, report None.", max_length=15, null=True, verbose_name='Overall cancer stage modifier')),
                ('treatment_itent', models.CharField(blank=True, choices=[('UNK', 'Unknown'), ('curative', 'Curative'), ('palliative', 'Palliative')], max_length=15, null=True, verbose_name='Treatment intent')),
                ('treatment_relationship', models.CharField(blank=True, choices=[('UNK', 'Unknown'), ('no_modalities', 'No other treatment modalities'), ('concurrent_chemo', 'Concurrent chemotherapy'), ('adj_after_surgery', 'Adjuvant after surgery'), ('adj_after_chemo', 'Adjuvant after chemotherapy'), ('adj_after_surgery_and_chemo', 'Adjuvant after surgery and chemotherapy'), ('neo_before_chemo', 'Neoadjuvant before Chemotherapy'), ('neo_before_surgery', 'Neoadjuvant before Surgery'), ('OTHER', 'Other, specify')], max_length=55, null=True, verbose_name='Relationship to other treatment modalities')),
                ('side_effects_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('response', models.CharField(blank=True, choices=[('UNK', 'Unknown'), ('complete', 'Complete'), ('almost_complete', 'Almost Complete'), ('residual_tumor', 'Residual Tumor'), ('poor_response', 'Poor response'), ('good_palliation', 'Good palliation'), ('modest_palliation', 'Modest Palliation'), ('poor_palliation', 'Poor Palliation'), ('OTHER', 'Other, specify')], max_length=55, null=True, verbose_name='Response to Treatment')),
                ('response_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('any_missed_doses', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('unknown', 'Unknown')], max_length=15, null=True, verbose_name='Were any doses missed')),
                ('if_doses_missed', models.CharField(blank=True, choices=[('toxicity_hematologic', 'Toxicity- hematologic (anemia, neutropenia, or low plts), '), ('toxicity_skin', 'Toxicity-skin (dermatitis, mucositis), '), ('unresponsive', 'Cancer not responding to treatment'), ('defaulted', 'Defaulted visit or lost to follow-up'), ('machine_downtime', 'Machine down-time or repair'), ('no_accomodation', 'clinic too busy to accommodate'), ('no_transport', 'lack of transportation to facility'), ('OTHER', 'Other, specify')], max_length=85, null=True, verbose_name='If yes, why were treatments missed? ')),
                ('if_doses_missed_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('any_doses_delayed', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('unknown', 'Unknown')], max_length=15, null=True, verbose_name='Were any doses delayed')),
                ('if_doses_delayed', models.CharField(blank=True, choices=[('toxicity_hematologic', 'Toxicity- hematologic (anemia, neutropenia, or low plts), '), ('toxicity_skin', 'Toxicity-skin (dermatitis, mucositis), '), ('unresponsive', 'Cancer not responding to treatment'), ('defaulted', 'Defaulted visit or lost to follow-up'), ('machine_downtime', 'Machine down-time or repair'), ('no_accomodation', 'clinic too busy to accommodate'), ('no_transport', 'lack of transportation to facility'), ('OTHER', 'Other, specify')], max_length=85, null=True, verbose_name='If yes, why were treatments delayed? ')),
                ('if_doses_delayed_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('first_course_radiation', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('unknown', 'Unknown')], max_length=15, null=True, verbose_name='Was this the first course of radiation')),
                ('comments', models.CharField(blank=True, max_length=250, null=True, verbose_name='Comments')),
                ('side_effects', models.ManyToManyField(blank=True, help_text='(tick all that apply)', max_length=55, to='cancer_subject.RadiationSideEffects', verbose_name='Side Effects')),
            ],
            options={
                'verbose_name': 'Radiation Treatment',
            },
        ),
        migrations.CreateModel(
            name='RadiationTreatmentRecord',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('treatment_name', models.CharField(max_length=50, verbose_name='Treatment (eg. Pelvis, Tans, Scar Boost)')),
                ('start_date', models.DateField(blank=True, max_length=25, null=True, verbose_name='Start Date')),
                ('end_date', models.DateField(blank=True, max_length=25, null=True, verbose_name='End Date')),
                ('dose_delivered', models.IntegerField(blank=True, null=True, verbose_name='Total Dose Delivered (cGy)')),
                ('dose_described', models.IntegerField(blank=True, null=True, verbose_name='Total Dose Prescribed (cGy)')),
                ('fractions', models.IntegerField(blank=True, null=True, verbose_name='Total Number of Fractions')),
                ('dose_per_fraction', models.IntegerField(blank=True, null=True, verbose_name='Dose per Fraction (cGy)')),
                ('radiation_technique', models.CharField(blank=True, choices=[('AP/PA', 'AP/PA'), ('4_field_box', '4-field Box'), ('opposed_laterals', 'Opposed Laterals'), ('tangents', 'Tangents'), ('IMRT', 'IMRT'), ('IR_192', 'IR 192'), ('OTHER', 'Other Technique')], max_length=25, null=True, verbose_name='Radiation Technique')),
                ('radiation_technique_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('modality', models.CharField(blank=True, choices=[('photons', 'Photons'), ('electrons', 'Electrons'), ('brachy', 'Brachy'), ('particle_therapy', 'Particle Therapy'), ('OTHER', 'Other Energy')], max_length=25, verbose_name='Modality')),
                ('brachy_length', models.CharField(blank=True, choices=[('2', '2'), ('3.5', '3.5'), ('4', '4'), ('6', '6'), ('8', '8'), ('OTHER', 'Other'), ('UNK', 'Unknown')], max_length=25, null=True, verbose_name='Brachy Applicator length (cm)')),
                ('brachy_type', models.CharField(blank=True, choices=[('T&SR', 'T&SR'), ('T&Ovoids', 'T&Ovoids'), ('T&Cylinder', 'T&Cylinder'), ('Cylinder', 'Cylinder'), ('SR', 'SR'), ('OTHER', 'Other'), ('UNK', 'Unknown')], max_length=25, null=True, verbose_name='Brachy Applicator type')),
                ('radiation_treatment', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='cancer_subject.RadiationTreatment')),
            ],
            options={
                'verbose_name': 'Radiation Treatment Record',
            },
        ),
        migrations.CreateModel(
            name='Referral',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('report_datetime', models.DateTimeField(null=True)),
                ('referrals', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='(if No , STOP and return form to DMC.)', max_length=3, verbose_name='Have any referrals been made that should be reported been made (by study team or hospital staff)?')),
                ('why_referred', models.CharField(choices=[('IDCC_for_HAART_initiation', ' IDCC (infectious disease) for HAART initiation'), ('IDCC_for_modification_of_HAART', ' IDCC (infectious disease) for modification of HAART (failure, toxicity, etc)'), ('GOPD,TB_clinic,or_local_clinic_for_evaluation/treatment_of_TB', 'GOPD, TB clinic, or local clinic for evaluation/treatment of TB'), ('psychiatry_for_treatment_of_depression_or_other_mental_illness', ' Psychiatry for treatment of depression or other mental illness'), ('social_work_for_assistance_with_food_basket,home_services,or_other_needs', ' Social work for assistance with food basket, home services, or other needs'), ('OTHER', ' Other, explain:')], max_length=75, verbose_name='Where and why has patient been referred?')),
                ('referral_date', models.DateTimeField(help_text='dd/mm/yyyy', max_length=25, verbose_name='Date of referral?')),
                ('comments', models.CharField(max_length=35, verbose_name='Comments')),
            ],
            options={
                'verbose_name': 'Referral',
            },
        ),
        migrations.CreateModel(
            name='ResultsToRecord',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, help_text='(suggest 40 characters max.)', max_length=250, unique=True, verbose_name='Name')),
                ('short_name', models.CharField(db_index=True, help_text='This is the stored value, required', max_length=250, unique=True, verbose_name='Stored value')),
                ('display_index', models.IntegerField(db_index=True, default=0, help_text='Index to control display order if not alphabetical, not required', verbose_name='display index')),
                ('field_name', models.CharField(blank=True, editable=False, help_text='Not required', max_length=25, null=True)),
                ('version', models.CharField(default='1.0', editable=False, max_length=35)),
            ],
            options={
                'ordering': ['display_index', 'name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SubjectConsent',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('subject_identifier_as_pk', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('subject_identifier_aka', models.CharField(editable=False, help_text='track a previously allocated identifier.', max_length=50, null=True, verbose_name='Subject Identifier a.k.a')),
                ('citizen', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Is the participant a Botswana citizen? ')),
                ('legal_marriage', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', help_text="If 'No', participant may not be consented.", max_length=3, null=True, verbose_name='If not a citizen, is the participant legally married to a Botswana citizen?')),
                ('marriage_certificate', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', help_text="If 'No', participant may not be consented.", max_length=3, null=True, verbose_name='[Interviewer] Has the participant produced the marriage certificate as proof? ')),
                ('marriage_certificate_no', models.CharField(blank=True, help_text='e.g. 000/YYYY', max_length=9, null=True, verbose_name='What is the marriage certificate number?')),
                ('identity', django_crypto_fields.fields.identity_field.IdentityField(help_text=' (Encryption: RSA local)', max_length=71, verbose_name='Identity number')),
                ('identity_type', models.CharField(max_length=25, verbose_name='What type of identity number is this?')),
                ('confirm_identity', django_crypto_fields.fields.identity_field.IdentityField(help_text='Retype the identity number (Encryption: RSA local)', max_length=71, null=True)),
                ('first_name', django_crypto_fields.fields.firstname_field.FirstnameField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True)),
                ('last_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Last name')),
                ('initials', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[django.core.validators.RegexValidator(message='Ensure initials consist of letters only in upper case, no spaces.', regex='^[A-Z]{2,3}$')])),
                ('dob', models.DateField(null=True, verbose_name='Date of birth')),
                ('is_dob_estimated', edc_base.model_fields.date_estimated.IsDateEstimatedField(choices=[('-', 'No'), ('D', 'Yes, estimated the Day'), ('MD', 'Yes, estimated Month and Day'), ('YMD', 'Yes, estimated Year, Month and Day')], help_text='If the exact date is not known, please indicate which part of the date is estimated.', max_length=25, null=True, verbose_name='Is date of birth estimated?')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('U', 'Undetermined')], max_length=1, null=True, verbose_name='Gender')),
                ('guardian_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text="Required only if participant is a minor.<BR>Format is 'LASTNAME, FIRSTNAME'. All uppercase separated by a comma. (Encryption: RSA local)", max_length=71, null=True, validators=[edc_consent.validators.FullNameValidator()], verbose_name="Guardian's last and first name")),
                ('subject_type', models.CharField(max_length=25)),
                ('consent_reviewed', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If no, participant is not eligible.', max_length=3, null=True, validators=[edc_consent.validators.eligible_if_yes], verbose_name='I have reviewed the consent with the participant')),
                ('study_questions', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If no, participant is not eligible.', max_length=3, null=True, validators=[edc_consent.validators.eligible_if_yes], verbose_name='I have answered all questions the participant had about the study')),
                ('assessment_score', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If no, participant is not eligible.', max_length=3, null=True, validators=[edc_consent.validators.eligible_if_yes], verbose_name='I have asked the participant questions about this study and the participant has demonstrated understanding')),
                ('consent_signature', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If no, participant is not eligible.', max_length=3, null=True, validators=[edc_consent.validators.eligible_if_yes], verbose_name='I have verified that the participant has signed the consent form')),
                ('consent_copy', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Declined', 'Yes, but subject declined copy')], help_text='If declined, return copy with the consent', max_length=20, null=True, validators=[edc_consent.validators.eligible_if_yes_or_declined], verbose_name='I have provided the participant with a copy of their signed informed consent')),
                ('may_store_genetic_samples', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Does the participant agree that a portion of the blood sample that is taken be stored for genetic analysis?')),
                ('may_store_samples', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Does the participant agree to have samples stored after the study has ended')),
                ('is_incarcerated', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text="( if 'Yes' STOP participant cannot be consented )", max_length=3, null=True, validators=[edc_consent.validators.eligible_if_no], verbose_name='Is the participant under involuntary incarceration?')),
                ('is_literate', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text="If 'No' provide witness's name on this form and signature on the paper document.", max_length=3, verbose_name='Is the participant literate?')),
                ('witness_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text="Required only if participant is illiterate.<br>Format is 'LASTNAME, FIRSTNAME'. All uppercase separated by a comma. (Encryption: RSA local)", max_length=71, null=True, validators=[edc_consent.validators.FullNameValidator()], verbose_name="Witness's last and first name")),
                ('language', models.CharField(choices=[('af', 'Afrikaans'), ('ar', 'Arabic'), ('ast', 'Asturian'), ('az', 'Azerbaijani'), ('bg', 'Bulgarian'), ('be', 'Belarusian'), ('bn', 'Bengali'), ('br', 'Breton'), ('bs', 'Bosnian'), ('ca', 'Catalan'), ('cs', 'Czech'), ('cy', 'Welsh'), ('da', 'Danish'), ('de', 'German'), ('dsb', 'Lower Sorbian'), ('el', 'Greek'), ('en', 'English'), ('en-au', 'Australian English'), ('en-gb', 'British English'), ('eo', 'Esperanto'), ('es', 'Spanish'), ('es-ar', 'Argentinian Spanish'), ('es-co', 'Colombian Spanish'), ('es-mx', 'Mexican Spanish'), ('es-ni', 'Nicaraguan Spanish'), ('es-ve', 'Venezuelan Spanish'), ('et', 'Estonian'), ('eu', 'Basque'), ('fa', 'Persian'), ('fi', 'Finnish'), ('fr', 'French'), ('fy', 'Frisian'), ('ga', 'Irish'), ('gd', 'Scottish Gaelic'), ('gl', 'Galician'), ('he', 'Hebrew'), ('hi', 'Hindi'), ('hr', 'Croatian'), ('hsb', 'Upper Sorbian'), ('hu', 'Hungarian'), ('ia', 'Interlingua'), ('id', 'Indonesian'), ('io', 'Ido'), ('is', 'Icelandic'), ('it', 'Italian'), ('ja', 'Japanese'), ('ka', 'Georgian'), ('kab', 'Kabyle'), ('kk', 'Kazakh'), ('km', 'Khmer'), ('kn', 'Kannada'), ('ko', 'Korean'), ('lb', 'Luxembourgish'), ('lt', 'Lithuanian'), ('lv', 'Latvian'), ('mk', 'Macedonian'), ('ml', 'Malayalam'), ('mn', 'Mongolian'), ('mr', 'Marathi'), ('my', 'Burmese'), ('nb', 'Norwegian Bokmål'), ('ne', 'Nepali'), ('nl', 'Dutch'), ('nn', 'Norwegian Nynorsk'), ('os', 'Ossetic'), ('pa', 'Punjabi'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pt-br', 'Brazilian Portuguese'), ('ro', 'Romanian'), ('ru', 'Russian'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('sq', 'Albanian'), ('sr', 'Serbian'), ('sr-latn', 'Serbian Latin'), ('sv', 'Swedish'), ('sw', 'Swahili'), ('ta', 'Tamil'), ('te', 'Telugu'), ('th', 'Thai'), ('tr', 'Turkish'), ('tt', 'Tatar'), ('udm', 'Udmurt'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('vi', 'Vietnamese'), ('zh-hans', 'Simplified Chinese'), ('zh-hant', 'Traditional Chinese')], help_text='The language used for the consent process will also be used during data collection.', max_length=25, verbose_name='Language of consent')),
                ('is_verified', models.BooleanField(default=False, editable=False)),
                ('is_verified_datetime', models.DateTimeField(editable=False, null=True)),
                ('verified_by', models.CharField(editable=False, max_length=25, null=True)),
                ('consent_datetime', models.DateTimeField(validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Consent date and time')),
                ('report_datetime', models.DateTimeField(editable=False, null=True)),
                ('version', models.CharField(editable=False, help_text="See 'Consent Type' for consent versions by period.", max_length=10, verbose_name='Consent version')),
                ('updates_versions', models.BooleanField(default=False)),
                ('sid', models.CharField(blank=True, editable=False, help_text='Used for randomization against a prepared rando-list.', max_length=15, null=True, verbose_name='SID')),
                ('comment', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=250, null=True, verbose_name='Comment')),
                ('dm_comment', models.CharField(editable=False, help_text='see also edc.data manager.', max_length=150, null=True, verbose_name='Data Management comment')),
                ('consent_identifier', models.UUIDField(default=uuid.uuid4, editable=False, help_text='A unique identifier for this consent instance')),
                ('slug', models.CharField(db_index=True, default='', editable=False, help_text='a field used for quick search', max_length=250, null=True)),
                ('is_signed', models.BooleanField(default=False, editable=False)),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.Site')),
            ],
            options={
                'ordering': ('-created',),
                'get_latest_by': 'consent_datetime',
                'abstract': False,
            },
            managers=[
                ('consent', django.db.models.manager.Manager()),
                ('on_site', edc_base.sites.managers.CurrentSiteManager()),
            ],
        ),
        migrations.CreateModel(
            name='SubjectLocator',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(max_length=50, unique=True, verbose_name='Subject Identifier')),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('may_call', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Has the participant given permission <b>to contacted by telephone or cell</b> by study staff for follow-up purposes during the study?')),
                ('may_visit_home', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Has the participant given permission for study staff <b>to make home visits</b> for follow-up purposes?')),
                ('may_sms', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, null=True, verbose_name='Has the participant given permission <b>to be contacted by SMS</b> by study staff for follow-up purposes during the study?')),
                ('mail_address', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=500, null=True, verbose_name='Mailing address ')),
                ('physical_address', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=500, null=True, verbose_name='Physical address with detailed description')),
                ('subject_cell', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Cell number')),
                ('subject_cell_alt', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Cell number (alternate)')),
                ('subject_phone', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.TelephoneNumber], verbose_name='Telephone')),
                ('subject_phone_alt', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.TelephoneNumber], verbose_name='Telephone (alternate)')),
                ('may_contact_indirectly', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='For example a partner, spouse, family member, neighbour ...', max_length=25, verbose_name='Has the participant given permission for study staff <b>to contact anyone else</b> for follow-up purposes during the study?')),
                ('indirect_contact_name', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Full names of the contact person')),
                ('indirect_contact_relation', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Relationship to participant')),
                ('indirect_contact_physical_address', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=500, null=True, verbose_name='Full physical address ')),
                ('indirect_contact_cell', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Cell number')),
                ('indirect_contact_cell_alt', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Cell number (alternative)')),
                ('indirect_contact_phone', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.TelephoneNumber], verbose_name='Telephone number')),
                ('may_call_work', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Has the participant given permission to contacted <b>at work</b> by telephone or cell by study staff for follow-up purposes during the study?')),
                ('subject_work_place', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=250, null=True, verbose_name='Name and location of work place')),
                ('subject_work_phone', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.TelephoneNumber], verbose_name='Work contact telephone')),
                ('subject_work_cell', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Work contact cell number')),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow)),
                ('home_visit_permission', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Has the participant given his/her permission for studystaff to make home visits for follow-up purposes?')),
                ('alt_contact_cell_number', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Cell number (alternate)')),
                ('has_alt_contact', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=25, verbose_name='If we are unable to contact the person indicated above, is there another individual (including next of kin) with whom the study team can get in contact with?')),
                ('alt_contact_name', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text='include first name and surname (Encryption: RSA local)', max_length=71, null=True, verbose_name='Full Name of the responsible person')),
                ('alt_contact_rel', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Relationship to participant')),
                ('alt_contact_cell', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Cell number')),
                ('other_alt_contact_cell', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Cell number (alternate)')),
                ('alt_contact_tel', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.TelephoneNumber], verbose_name='Telephone number')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SubjectOffstudy',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(max_length=50, unique=True, verbose_name='Subject Identifier')),
                ('visit_schedule_name', models.CharField(editable=False, help_text='the name of the visit schedule used to find the "schedule"', max_length=25)),
                ('schedule_name', models.CharField(editable=False, max_length=25)),
                ('offstudy_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Off-study date and time')),
                ('offstudy_reason', models.CharField(choices=[('lost', 'Lost to follow-up'), ('completed protocol', 'Completed protocol'), ('consent_withdrawal', 'Completed protocol'), ('dead', 'Deceased')], max_length=125, verbose_name='Please code the primary reason participant taken off-study')),
                ('offstudy_reason_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
            ],
            options={
                'verbose_name_plural': 'Subject Off Study',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SubjectVisit',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('visit_schedule_name', models.CharField(editable=False, help_text='the name of the visit schedule used to find the "schedule"', max_length=25)),
                ('schedule_name', models.CharField(editable=False, max_length=25)),
                ('visit_code', models.CharField(editable=False, max_length=25, null=True)),
                ('visit_code_sequence', models.IntegerField(blank=True, default=0, help_text='An integer to represent the sequence of additional appointments relative to the base appointment, 0, needed to complete data collection for the timepoint. (NNNN.0)', null=True, verbose_name='Sequence')),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text='Date and time of this report', validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Visit Date and Time')),
                ('reason', models.CharField(max_length=25, verbose_name='What is the reason for this visit?')),
                ('reason_unscheduled', models.CharField(choices=[('patient_unwell_outpatient', 'Patient unwell (outpatient)'), ('patient_hospitalised', 'Patient hospitalised'), ('OTHER', 'Other'), ('N/A', 'Not applicable')], default='N/A', max_length=25, verbose_name="If 'Unscheduled' above, provide reason for the unscheduled visit")),
                ('reason_unscheduled_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=25, null=True, verbose_name='If "Other" reason for unscheduled visit, specify')),
                ('reason_missed', models.CharField(blank=True, max_length=35, null=True, verbose_name="If 'Missed' above, provide the reason the scheduled visit was missed")),
                ('reason_missed_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=25, null=True, verbose_name='If "Other" reason for missed visit, specify')),
                ('study_status', models.CharField(max_length=50, null=True, verbose_name="What is the participant's current study status")),
                ('require_crfs', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='Yes', max_length=10, verbose_name='Are scheduled data being submitted with this visit?')),
                ('info_source', models.CharField(max_length=25, verbose_name='What is the main source of this information?')),
                ('info_source_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If "Other" source of information, specify')),
                ('survival_status', models.CharField(choices=[('alive', 'Alive'), ('dead', 'Deceased'), ('unknown', 'Unknown')], default='alive', max_length=10, null=True, verbose_name="Participant's survival status")),
                ('last_alive_date', models.DateField(blank=True, null=True, validators=[edc_protocol.validators.date_not_before_study_start, edc_base.model_validators.date.date_not_future], verbose_name='Date participant last known alive')),
                ('comments', models.TextField(blank=True, max_length=250, null=True, verbose_name='Comment if any additional pertinent information about the participant')),
                ('appointment', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='cancer_subject.Appointment')),
            ],
            options={
                'ordering': ('subject_identifier', 'visit_schedule_name', 'schedule_name', 'visit_code', 'visit_code_sequence', 'report_datetime'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SymptomsAndTesting',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model_validators.date.datetime_not_future, edc_protocol.validators.datetime_not_before_study_start], verbose_name='Report Date')),
                ('symptom_prompt', models.CharField(max_length=50, verbose_name='What symptom was most important in prompting you to seek care leading to a diagnosis of cancer (ie pain, lump, fever, bleeding, etc)?')),
                ('symptom_date', models.DateField(blank=True, max_length=25, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='When did you first notice the symptom that led to a diagnosis of cancer?')),
                ('medical_doctor_date', models.DateField(blank=True, max_length=25, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='When did you first see a medical doctor for the symptom?')),
                ('trad_doctor_date', models.DateField(blank=True, max_length=25, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='When did you first see a traditional doctor for the symptom?')),
                ('facility_first_seen', models.CharField(help_text='provide name of clinic if facility code is unknown or is 00-0-00', max_length=15, validators=[django.core.validators.RegexValidator(message='The correct clinic facility or health-post code format is XX-X-XX', regex='^[0-9]{2}[-][0-9]{1}[-][0-9]{2}$')], verbose_name='In which facility was this symptom first presented?')),
                ('facility_first_seen_other', models.CharField(blank=True, max_length=35, null=True, verbose_name='Please provide name of clinic')),
                ('hiv_tested', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('REFUSED', 'Refused to answer')], max_length=18, verbose_name='Have you ever been tested for HIV?')),
                ('hiv_test_result', models.CharField(blank=True, choices=[('POS', 'Positive'), ('NEG', 'Negative'), ('IND', 'Indeterminate'), ('REF', 'Refused to disclose')], max_length=18, null=True, verbose_name='What was the most recent HIV test result?')),
                ('pos_date', models.DateField(blank=True, max_length=25, null=True, verbose_name='When was your first positive HIV test?')),
                ('neg_date', models.DateField(blank=True, help_text='if within the last 6 months END form ', max_length=25, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='When was your last negative HIV test?')),
                ('hiv_result', models.CharField(choices=[('POS', 'Positive (both rapid tests)'), ('NEG', 'Negative (both rapid tests)'), ('IND', 'Indeterminate (different results on rapid tests)'), ('PENDING', 'Result pending (sent to lab waiting for result)'), ('REFUSED', 'Patient refuses HIV testing today')], help_text='Provide appropriate post-test counselling and referral to care. If indeterminate, send patient to the lab for re-testing and ELISA', max_length=18, verbose_name='HIV test result')),
                ('arv_art_therapy', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('REFUSED', 'Refused to answer')], help_text='if NO END form', max_length=18, null=True, verbose_name='Have you ever taken anti-retroviral therapy or HAART?')),
                ('arv_art_start_date', models.DateField(blank=True, max_length=25, null=True, verbose_name='When did you start antiretroviral therapy, or HAART')),
                ('arv_art_now', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('REFUSED', 'Refused to answer')], help_text='if Yes END form ', max_length=18, null=True, verbose_name='Are you taking antiretroviral therapy or HAART now?')),
                ('art_art_stop_date', models.DateField(blank=True, max_length=25, null=True, verbose_name='When did you most recently stop antiretroviral therapy, or HAART?')),
                ('subject_visit', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='cancer_subject.SubjectVisit')),
            ],
            options={
                'verbose_name': 'Symptoms and Testing',
                'verbose_name_plural': 'Symptoms and Testing',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TreatmentResponse',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model_validators.date.datetime_not_future, edc_protocol.validators.datetime_not_before_study_start], verbose_name='Report Date')),
                ('tx_response_class', models.CharField(choices=[('progressive_disease', 'Progressive disease (tumors are growing or new tumors are appearing)'), ('stable_disease', 'Stable disease (no substantial change in size or location of tumors)'), ('partial_response', 'Partial response (at least 50% decrease in tumor size, but less than 100% decrease)'), ('complete_response', 'Complete response (all detectable cancer is gone, 100% decrease)'), ('too_early_to_assess_response', 'Too early after treatment to assess treatment response'), ('cannot_determine_due_to_pending/missing/unavailable_studies', 'Cannot determine due to pending/missing/unavailable studies (labs, radiology, exam, etc.)'), ('not_recorded', 'Not recorded')], max_length=95, verbose_name='Response to cancer treatment as classified by oncologist / doctor?')),
                ('tx_response_date', models.DateField(max_length=25, verbose_name='Date of assessment of treatment response:')),
                ('tx_response', models.TextField(max_length=350, verbose_name='Briefly describe response to treatment and information used to judge treatment response: ')),
                ('subject_visit', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='cancer_subject.SubjectVisit')),
                ('tx_info_determinant', models.ManyToManyField(max_length=45, to='cancer_subject.InfoDeterminant', verbose_name='Information used by oncologist / doctor to determine treatment response?')),
            ],
            options={
                'verbose_name': 'Treatment Response',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WhoIllness',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, help_text='(suggest 40 characters max.)', max_length=250, unique=True, verbose_name='Name')),
                ('short_name', models.CharField(db_index=True, help_text='This is the stored value, required', max_length=250, unique=True, verbose_name='Stored value')),
                ('display_index', models.IntegerField(db_index=True, default=0, help_text='Index to control display order if not alphabetical, not required', verbose_name='display index')),
                ('field_name', models.CharField(blank=True, editable=False, help_text='Not required', max_length=25, null=True)),
                ('version', models.CharField(default='1.0', editable=False, max_length=35)),
            ],
            options={
                'ordering': ['display_index', 'name'],
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='radiationtreatment',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='cancer_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='otrsurgical',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='cancer_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='otrradiation',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='cancer_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='otrchemo',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='cancer_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='oncologytreatmentrecord',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='cancer_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='oncologytreatmentplan',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='cancer_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='oncologytreatmentcompleted',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='cancer_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='labresultviralload',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='cancer_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='labresulttb',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='cancer_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='labresulthiv',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='cancer_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='labresultheightweight',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='cancer_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='labresulthaematology',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='cancer_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='labresultchemistry',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='cancer_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='labresultcd4',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='cancer_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='labresult',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='cancer_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='haartrecord',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='cancer_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='haartmedrecord',
            name='haart_record',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='cancer_subject.HaartRecord'),
        ),
        migrations.AddField(
            model_name='currentsymptoms',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='cancer_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='chemomedrecord',
            name='otr_chemo',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='cancer_subject.OTRChemo'),
        ),
        migrations.AddField(
            model_name='chemomedplan',
            name='oncology_treatment_plan',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='cancer_subject.OncologyTreatmentPlan'),
        ),
        migrations.AddField(
            model_name='cancerdiagnosis',
            name='results_to_record',
            field=models.ManyToManyField(blank=True, help_text='(tick all that apply - REMEMBER to highlight your chosen options before save)', to='cancer_subject.ResultsToRecord', verbose_name='Based the cancer diagnosis or other factors which of the following results be recorded (refer to SOP)?'),
        ),
        migrations.AddField(
            model_name='cancerdiagnosis',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='cancer_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='bhhwhoillness',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='cancer_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='bhhwhoillness',
            name='who_illness',
            field=models.ManyToManyField(help_text='Tick all that apply.  DO NOT include current cancer diagnosis', max_length=35, to='cancer_subject.WhoIllness', verbose_name='What WHO stage 3 or 4 illnesses the patient had:'),
        ),
        migrations.AddField(
            model_name='bhhhivtest',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='cancer_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='bhhcd4',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='cancer_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='baseriskassessmentsun',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='cancer_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='baseriskassessmentsmoking',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='cancer_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='baseriskassessmentmining',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='cancer_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='baseriskassessmentfuel',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='cancer_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='baseriskassessmentfemale',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='cancer_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='baseriskassessmenteating',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='cancer_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='baseriskassessmentdemo',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='cancer_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='baseriskassessmentchemical',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='cancer_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='baseriskassessmentcancer',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='cancer_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='baseriskassessmentalcohol',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='cancer_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='baseriskassessment',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='cancer_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='baselinehivhistory',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='cancer_subject.SubjectVisit'),
        ),
        migrations.AlterUniqueTogether(
            name='appointment',
            unique_together={('subject_identifier', 'visit_schedule_name', 'schedule_name', 'visit_code', 'timepoint', 'visit_code_sequence')},
        ),
        migrations.AddField(
            model_name='af004',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='cancer_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='ae010',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='cancer_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='activityandfunctioning',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='cancer_subject.SubjectVisit'),
        ),
        migrations.AlterUniqueTogether(
            name='subjectvisit',
            unique_together={('subject_identifier', 'visit_schedule_name', 'schedule_name', 'visit_code', 'visit_code_sequence'), ('subject_identifier', 'visit_schedule_name', 'schedule_name', 'report_datetime')},
        ),
        migrations.AlterUniqueTogether(
            name='subjectconsent',
            unique_together={('subject_identifier', 'version'), ('first_name', 'dob', 'initials', 'version')},
        ),
    ]
