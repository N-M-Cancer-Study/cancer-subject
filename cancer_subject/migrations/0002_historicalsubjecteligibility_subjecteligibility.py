# Generated by Django 2.0b1 on 2017-10-26 20:03

import _socket
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_crypto_fields.fields.firstname_field
import django_revision.revision_field
import edc_base.model_fields.hostname_modification_field
import edc_base.model_fields.userfield
import edc_base.model_fields.uuid_auto_field
import edc_base.model_validators.date
import edc_base.utils
import uuid


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('cancer_subject', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='HistoricalSubjectEligibility',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('subject_identifier_as_pk', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('subject_identifier_aka', models.CharField(editable=False, help_text='track a previously allocated identifier.', max_length=50, null=True, verbose_name='Subject Identifier a.k.a')),
                ('reference', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, verbose_name='Reference')),
                ('screening_identifier', models.CharField(blank=True, db_index=True, editable=False, max_length=50, verbose_name='Eligibility Id')),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, validators=[edc_base.model_validators.date.datetime_not_future], verbose_name='Report date')),
                ('first_name', django_crypto_fields.fields.firstname_field.FirstnameField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, validators=[django.core.validators.RegexValidator('^[A-Z]{1,250}$', 'Ensure first name is in CAPS and does not contain any spaces or numbers')], verbose_name='First name')),
                ('initials', models.CharField(max_length=3, validators=[django.core.validators.MinLengthValidator(2), django.core.validators.MaxLengthValidator(3), django.core.validators.RegexValidator('^[A-Z]{1,3}$', 'Must be Only CAPS and 2 or 3 letters. No spaces or numbers allowed.')], verbose_name='Initials')),
                ('age_in_years', models.IntegerField(verbose_name='Age in years as reported by patient')),
                ('guardian', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], help_text='If a minor age 16 and 17, ensure a guardian is available otherwise participant will not be enrolled.', max_length=10, verbose_name='If minor, is there a guardian available? ')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('U', 'Undetermined')], max_length=1, verbose_name='Gender')),
                ('has_identity', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text="Allow Omang, Passport number, driver's license number or Omang receipt number. If 'NO' participant will not be enrolled.", max_length=10, verbose_name='[Interviewer] Has the subject presented a valid OMANG or other identity document?')),
                ('citizen', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('unknown', 'Unknown')], max_length=7, verbose_name='Are you a Botswana citizen? ')),
                ('legal_marriage', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', help_text="If 'NO' participant is not eligible.", max_length=3, verbose_name='If not a citizen, are you legally married to a Botswana Citizen?')),
                ('marriage_certificate', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', help_text="If 'NO' participant is not eligible.", max_length=3, verbose_name='[Interviewer] Has the participant produced the marriage certificate, as proof? ')),
                ('literacy', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('unknown', 'Unknown')], help_text='If participate is illiterate, confirm there is a literatewitness available otherwise participant is not eligible.', max_length=7, verbose_name='Is the participant LITERATE?, or if ILLITERATE, is there a  LITERATE witness available ')),
                ('cancer_status', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If NO, participant is not eligible.', max_length=30, verbose_name='Has a cancer diagnosis been documented?')),
                ('enrollment_site', models.CharField(choices=[('gaborone_private_hospital', ' Gaborone Private Hospital (GPH)'), ('nyangabgwe_referral_Hospital', 'Nyangabgwe Referral Hospital (NRH)'), ('princess_marina_hospital', 'Princess Marina Hospital (PMH)'), ('bokamoso_private_hospital', 'Bokamoso Private Hospital (BPH)')], help_text='Hospital where subject is recruited', max_length=100, null=True)),
                ('eligible', models.BooleanField(default=False, editable=False)),
                ('reasons_ineligible', models.TextField(editable=False, max_length=150, null=True, verbose_name='Reason not eligible')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Subject Eligibility',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='SubjectEligibility',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('subject_identifier_as_pk', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('subject_identifier_aka', models.CharField(editable=False, help_text='track a previously allocated identifier.', max_length=50, null=True, verbose_name='Subject Identifier a.k.a')),
                ('reference', models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name='Reference')),
                ('screening_identifier', models.CharField(blank=True, editable=False, max_length=50, unique=True, verbose_name='Eligibility Id')),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, validators=[edc_base.model_validators.date.datetime_not_future], verbose_name='Report date')),
                ('first_name', django_crypto_fields.fields.firstname_field.FirstnameField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, validators=[django.core.validators.RegexValidator('^[A-Z]{1,250}$', 'Ensure first name is in CAPS and does not contain any spaces or numbers')], verbose_name='First name')),
                ('initials', models.CharField(max_length=3, validators=[django.core.validators.MinLengthValidator(2), django.core.validators.MaxLengthValidator(3), django.core.validators.RegexValidator('^[A-Z]{1,3}$', 'Must be Only CAPS and 2 or 3 letters. No spaces or numbers allowed.')], verbose_name='Initials')),
                ('age_in_years', models.IntegerField(verbose_name='Age in years as reported by patient')),
                ('guardian', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], help_text='If a minor age 16 and 17, ensure a guardian is available otherwise participant will not be enrolled.', max_length=10, verbose_name='If minor, is there a guardian available? ')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('U', 'Undetermined')], max_length=1, verbose_name='Gender')),
                ('has_identity', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text="Allow Omang, Passport number, driver's license number or Omang receipt number. If 'NO' participant will not be enrolled.", max_length=10, verbose_name='[Interviewer] Has the subject presented a valid OMANG or other identity document?')),
                ('citizen', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('unknown', 'Unknown')], max_length=7, verbose_name='Are you a Botswana citizen? ')),
                ('legal_marriage', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', help_text="If 'NO' participant is not eligible.", max_length=3, verbose_name='If not a citizen, are you legally married to a Botswana Citizen?')),
                ('marriage_certificate', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', help_text="If 'NO' participant is not eligible.", max_length=3, verbose_name='[Interviewer] Has the participant produced the marriage certificate, as proof? ')),
                ('literacy', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('unknown', 'Unknown')], help_text='If participate is illiterate, confirm there is a literatewitness available otherwise participant is not eligible.', max_length=7, verbose_name='Is the participant LITERATE?, or if ILLITERATE, is there a  LITERATE witness available ')),
                ('cancer_status', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If NO, participant is not eligible.', max_length=30, verbose_name='Has a cancer diagnosis been documented?')),
                ('enrollment_site', models.CharField(choices=[('gaborone_private_hospital', ' Gaborone Private Hospital (GPH)'), ('nyangabgwe_referral_Hospital', 'Nyangabgwe Referral Hospital (NRH)'), ('princess_marina_hospital', 'Princess Marina Hospital (PMH)'), ('bokamoso_private_hospital', 'Bokamoso Private Hospital (BPH)')], help_text='Hospital where subject is recruited', max_length=100, null=True)),
                ('eligible', models.BooleanField(default=False, editable=False)),
                ('reasons_ineligible', models.TextField(editable=False, max_length=150, null=True, verbose_name='Reason not eligible')),
            ],
            options={
                'verbose_name': 'Subject Eligibility',
            },
        ),
    ]
